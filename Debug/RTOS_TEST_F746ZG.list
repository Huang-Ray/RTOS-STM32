
RTOS_TEST_F746ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008088  08008088  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008090  08008090  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008090  08008090  00018090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e8c  2000000c  080080a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e98  080080a4  00024e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e812  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003797  00000000  00000000  0003e84e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001810  00000000  00000000  00041fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001678  00000000  00000000  000437f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000039fe  00000000  00000000  00044e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000130de  00000000  00000000  0004886e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe540  00000000  00000000  0005b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159e8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006608  00000000  00000000  00159f08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800800c 	.word	0x0800800c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	0800800c 	.word	0x0800800c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b0a6      	sub	sp, #152	; 0x98
 8000514:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000516:	f000 fd90 	bl	800103a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051a:	f000 f895 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051e:	f000 f9c1 	bl	80008a4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000522:	f000 f921 	bl	8000768 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000526:	f000 f95f 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052a:	f000 f98d 	bl	8000848 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 800052e:	f003 ffff 	bl	8004530 <osKernelInitialize>

  /* Create the mutex(es) */
  /* definition and creation of mutex01 */
  const osMutexAttr_t mutex01_attributes = {
 8000532:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	4b34      	ldr	r3, [pc, #208]	; (8000614 <main+0x104>)
 8000542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    .name = "mutex01"
  };
  mutex01Handle = osMutexNew(&mutex01_attributes);
 8000546:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800054a:	4618      	mov	r0, r3
 800054c:	f004 f9b2 	bl	80048b4 <osMutexNew>
 8000550:	4602      	mov	r2, r0
 8000552:	4b31      	ldr	r3, [pc, #196]	; (8000618 <main+0x108>)
 8000554:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queue01 */
  const osMessageQueueAttr_t queue01_attributes = {
 8000556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]
 8000566:	615a      	str	r2, [r3, #20]
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <main+0x10c>)
 800056a:	673b      	str	r3, [r7, #112]	; 0x70
    .name = "queue01"
  };
  queue01Handle = osMessageQueueNew (1, sizeof(uint16_t), &queue01_attributes);
 800056c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000570:	461a      	mov	r2, r3
 8000572:	2102      	movs	r1, #2
 8000574:	2001      	movs	r0, #1
 8000576:	f004 fae5 	bl	8004b44 <osMessageQueueNew>
 800057a:	4602      	mov	r2, r0
 800057c:	4b28      	ldr	r3, [pc, #160]	; (8000620 <main+0x110>)
 800057e:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledblink01 */
  const osThreadAttr_t ledblink01_attributes = {
 8000580:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000584:	2224      	movs	r2, #36	; 0x24
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f007 fd36 	bl	8007ffa <memset>
 800058e:	4b25      	ldr	r3, [pc, #148]	; (8000624 <main+0x114>)
 8000590:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000596:	663b      	str	r3, [r7, #96]	; 0x60
 8000598:	2318      	movs	r3, #24
 800059a:	667b      	str	r3, [r7, #100]	; 0x64
    .name = "ledblink01",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 1024
  };
  ledblink01Handle = osThreadNew(StartBlink01, NULL, &ledblink01_attributes);
 800059c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005a0:	461a      	mov	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	4820      	ldr	r0, [pc, #128]	; (8000628 <main+0x118>)
 80005a6:	f004 f82b 	bl	8004600 <osThreadNew>
 80005aa:	4602      	mov	r2, r0
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <main+0x11c>)
 80005ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledblink02 */
  const osThreadAttr_t ledblink02_attributes = {
 80005b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005b4:	2224      	movs	r2, #36	; 0x24
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f007 fd1e 	bl	8007ffa <memset>
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <main+0x120>)
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80005c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005c8:	2318      	movs	r3, #24
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
    .name = "ledblink02",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 1024
  };
  ledblink02Handle = osThreadNew(StartBlink02, NULL, &ledblink02_attributes);
 80005cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d0:	461a      	mov	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <main+0x124>)
 80005d6:	f004 f813 	bl	8004600 <osThreadNew>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <main+0x128>)
 80005de:	601a      	str	r2, [r3, #0]

  /* definition and creation of ledblink03 */
  const osThreadAttr_t ledblink03_attributes = {
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2224      	movs	r2, #36	; 0x24
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fd07 	bl	8007ffa <memset>
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <main+0x12c>)
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005f4:	61bb      	str	r3, [r7, #24]
 80005f6:	2318      	movs	r3, #24
 80005f8:	61fb      	str	r3, [r7, #28]
    .name = "ledblink03",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 1024
  };
  ledblink03Handle = osThreadNew(StartBlink03, NULL, &ledblink03_attributes);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	461a      	mov	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <main+0x130>)
 8000602:	f003 fffd 	bl	8004600 <osThreadNew>
 8000606:	4602      	mov	r2, r0
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <main+0x134>)
 800060a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f003 ffc4 	bl	8004598 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x100>
 8000612:	bf00      	nop
 8000614:	08008024 	.word	0x08008024
 8000618:	20004e10 	.word	0x20004e10
 800061c:	0800802c 	.word	0x0800802c
 8000620:	20004db8 	.word	0x20004db8
 8000624:	08008034 	.word	0x08008034
 8000628:	080009e9 	.word	0x080009e9
 800062c:	20004dc0 	.word	0x20004dc0
 8000630:	08008040 	.word	0x08008040
 8000634:	08000a15 	.word	0x08000a15
 8000638:	20004dc4 	.word	0x20004dc4
 800063c:	0800804c 	.word	0x0800804c
 8000640:	08000a91 	.word	0x08000a91
 8000644:	20004dbc 	.word	0x20004dbc

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b0b4      	sub	sp, #208	; 0xd0
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f007 fccf 	bl	8007ffa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2284      	movs	r2, #132	; 0x84
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f007 fcc0 	bl	8007ffa <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800067a:	f001 fd95 	bl	80021a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <SystemClock_Config+0x114>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	4a36      	ldr	r2, [pc, #216]	; (800075c <SystemClock_Config+0x114>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	4b34      	ldr	r3, [pc, #208]	; (800075c <SystemClock_Config+0x114>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000696:	4b32      	ldr	r3, [pc, #200]	; (8000760 <SystemClock_Config+0x118>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069e:	4a30      	ldr	r2, [pc, #192]	; (8000760 <SystemClock_Config+0x118>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <SystemClock_Config+0x118>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b2:	2301      	movs	r3, #1
 80006b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006d4:	2348      	movs	r3, #72	; 0x48
 80006d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e0:	2303      	movs	r3, #3
 80006e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fd6c 	bl	80021c8 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006f6:	f000 fa3d 	bl	8000b74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000700:	2302      	movs	r3, #2
 8000702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800071e:	2102      	movs	r1, #2
 8000720:	4618      	mov	r0, r3
 8000722:	f001 ffc1 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800072c:	f000 fa22 	bl	8000b74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <SystemClock_Config+0x11c>)
 8000732:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000734:	2300      	movs	r3, #0
 8000736:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	4618      	mov	r0, r3
 8000744:	f002 f9d6 	bl	8002af4 <HAL_RCCEx_PeriphCLKConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800074e:	f000 fa11 	bl	8000b74 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	37d0      	adds	r7, #208	; 0xd0
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000
 8000764:	00200100 	.word	0x00200100

08000768 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800076c:	4b1c      	ldr	r3, [pc, #112]	; (80007e0 <MX_ETH_Init+0x78>)
 800076e:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <MX_ETH_Init+0x7c>)
 8000770:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000772:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_ETH_Init+0x78>)
 8000774:	2201      	movs	r2, #1
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_ETH_Init+0x78>)
 800077a:	2200      	movs	r2, #0
 800077c:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800077e:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_ETH_Init+0x78>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_ETH_Init+0x78>)
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	3301      	adds	r3, #1
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000790:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_ETH_Init+0x78>)
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	3302      	adds	r3, #2
 8000796:	22e1      	movs	r2, #225	; 0xe1
 8000798:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_ETH_Init+0x78>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	3303      	adds	r3, #3
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_ETH_Init+0x78>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	3304      	adds	r3, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_ETH_Init+0x78>)
 80007b0:	695b      	ldr	r3, [r3, #20]
 80007b2:	3305      	adds	r3, #5
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_ETH_Init+0x78>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_ETH_Init+0x78>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_ETH_Init+0x78>)
 80007c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007ca:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_ETH_Init+0x78>)
 80007ce:	f000 fd65 	bl	800129c <HAL_ETH_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80007d8:	f000 f9cc 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20004dc8 	.word	0x20004dc8
 80007e4:	40028000 	.word	0x40028000

080007e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800082c:	f002 ffb6 	bl	800379c <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f000 f99d 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20004934 	.word	0x20004934
 8000844:	40004800 	.word	0x40004800

08000848 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000852:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2206      	movs	r2, #6
 8000858:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2202      	movs	r2, #2
 800085e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2202      	movs	r2, #2
 800086a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2201      	movs	r2, #1
 8000870:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2201      	movs	r2, #1
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	f001 fb50 	bl	8001f30 <HAL_PCD_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 f96d 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200049b4 	.word	0x200049b4

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a45      	ldr	r2, [pc, #276]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3f      	ldr	r2, [pc, #252]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a39      	ldr	r2, [pc, #228]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <MX_GPIO_Init+0x130>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b34      	ldr	r3, [pc, #208]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a33      	ldr	r2, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <MX_GPIO_Init+0x130>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000950:	4821      	ldr	r0, [pc, #132]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000952:	f001 fab9 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	; 0x40
 800095a:	4820      	ldr	r0, [pc, #128]	; (80009dc <MX_GPIO_Init+0x138>)
 800095c:	f001 fab4 	bl	8001ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_GPIO_Init+0x13c>)
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481b      	ldr	r0, [pc, #108]	; (80009e4 <MX_GPIO_Init+0x140>)
 8000976:	f001 f8fd 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800097a:	f244 0381 	movw	r3, #16513	; 0x4081
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <MX_GPIO_Init+0x134>)
 8000994:	f001 f8ee 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	480b      	ldr	r0, [pc, #44]	; (80009dc <MX_GPIO_Init+0x138>)
 80009b0:	f001 f8e0 	bl	8001b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_GPIO_Init+0x138>)
 80009c8:	f001 f8d4 	bl	8001b74 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3730      	adds	r7, #48	; 0x30
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40021800 	.word	0x40021800
 80009e0:	10110000 	.word	0x10110000
 80009e4:	40020800 	.word	0x40020800

080009e8 <StartBlink01>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint16_t msg = QUEUED_VALUE;
 80009f0:	f240 3309 	movw	r3, #777	; 0x309
 80009f4:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80009f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009fa:	f003 ff2d 	bl	8004858 <osDelay>
    osMessageQueuePut(queue01Handle, &msg, 0, 0);
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <StartBlink01+0x28>)
 8000a00:	6818      	ldr	r0, [r3, #0]
 8000a02:	f107 010e 	add.w	r1, r7, #14
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f004 f921 	bl	8004c50 <osMessageQueuePut>
    osDelay(500);
 8000a0e:	e7f2      	b.n	80009f6 <StartBlink01+0xe>
 8000a10:	20004db8 	.word	0x20004db8

08000a14 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint16_t msg;
  osStatus_t qstate;
  /* Infinite loop */
  for(;;)
  {
	  qstate = osMessageQueueGet(queue01Handle, &msg, 0, osWaitForever);
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <StartBlink02+0x74>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	f107 010a 	add.w	r1, r7, #10
 8000a24:	f04f 33ff 	mov.w	r3, #4294967295
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f004 f985 	bl	8004d38 <osMessageQueueGet>
 8000a2e:	60f8      	str	r0, [r7, #12]

	  /* To get here something must have arrived, but is it the expected
	   * value?  If it is, turn the LED on for a short while. */
	  if (qstate == osOK)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f2      	bne.n	8000a1c <StartBlink02+0x8>
	  {
		  if (msg == QUEUED_VALUE)
 8000a36:	897b      	ldrh	r3, [r7, #10]
 8000a38:	f240 3209 	movw	r2, #777	; 0x309
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d1ed      	bne.n	8000a1c <StartBlink02+0x8>
		  {
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	4811      	ldr	r0, [pc, #68]	; (8000a8c <StartBlink02+0x78>)
 8000a46:	f001 fa3f 	bl	8001ec8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2180      	movs	r1, #128	; 0x80
 8000a4e:	480f      	ldr	r0, [pc, #60]	; (8000a8c <StartBlink02+0x78>)
 8000a50:	f001 fa3a 	bl	8001ec8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <StartBlink02+0x78>)
 8000a5c:	f001 fa34 	bl	8001ec8 <HAL_GPIO_WritePin>
			  osDelay(20);
 8000a60:	2014      	movs	r0, #20
 8000a62:	f003 fef9 	bl	8004858 <osDelay>
			  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <StartBlink02+0x78>)
 8000a6c:	f001 fa2c 	bl	8001ec8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <StartBlink02+0x78>)
 8000a76:	f001 fa27 	bl	8001ec8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <StartBlink02+0x78>)
 8000a82:	f001 fa21 	bl	8001ec8 <HAL_GPIO_WritePin>
	  qstate = osMessageQueueGet(queue01Handle, &msg, 0, osWaitForever);
 8000a86:	e7c9      	b.n	8000a1c <StartBlink02+0x8>
 8000a88:	20004db8 	.word	0x20004db8
 8000a8c:	40020400 	.word	0x40020400

08000a90 <StartBlink03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink03 */
void StartBlink03(void *argument)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  /* Keep attempting to obtain the mutex.  We should only obtain it when
	   * the medium-priority thread has suspended itself, which in turn should only
	   * happen when the high-priority thread is also suspended */
	  if (osMutexAcquire(mutex01Handle, 0) == osOK)
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <StartBlink03+0xac>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 ffa2 	bl	80049e8 <osMutexAcquire>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1f6      	bne.n	8000a98 <StartBlink03+0x8>
	  {
		  /* Is the haigh and medium-priority threads suspended? */
		  if ((osThreadGetState(ledblink01Handle) != osThreadBlocked) || (osThreadGetState(ledblink02Handle) != osThreadBlocked))
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <StartBlink03+0xb0>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f003 fe50 	bl	8004754 <osThreadGetState>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b03      	cmp	r3, #3
 8000ab8:	d107      	bne.n	8000aca <StartBlink03+0x3a>
 8000aba:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <StartBlink03+0xb4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f003 fe48 	bl	8004754 <osThreadGetState>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b03      	cmp	r3, #3
 8000ac8:	d005      	beq.n	8000ad6 <StartBlink03+0x46>
		  {
			  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ace:	481e      	ldr	r0, [pc, #120]	; (8000b48 <StartBlink03+0xb8>)
 8000ad0:	f001 fa13 	bl	8001efa <HAL_GPIO_TogglePin>
 8000ad4:	e030      	b.n	8000b38 <StartBlink03+0xa8>
		  }
		  else
		  {
			  /* Keep count of the number of cycles this task has performed
			   * so a stall can be detected */
			  LowPriorityThreadCycles++;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <StartBlink03+0xbc>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <StartBlink03+0xbc>)
 8000ade:	6013      	str	r3, [r2, #0]
			   * the higher priority.  The medium-priority thread will block indefinitely
			   * when it attempts to obtain the mutex, the high-priority thread will only
			   * block for a fixed period and an error will be latched if the
			   * high-priority thread has not returned the mutex by the time this
			   * fixed period has expired */
		      osThreadResume(ledblink02Handle);
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <StartBlink03+0xb4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fe83 	bl	80047f0 <osThreadResume>
		      osThreadResume(ledblink01Handle);
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <StartBlink03+0xb0>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 fe7e 	bl	80047f0 <osThreadResume>

		      /* The other two tasks should now have executed and no longer
		       * be suspended */
			  if ((osThreadGetState(ledblink01Handle) != osThreadBlocked) || (osThreadGetState(ledblink02Handle) != osThreadBlocked))
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <StartBlink03+0xb0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fe2b 	bl	8004754 <osThreadGetState>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d107      	bne.n	8000b14 <StartBlink03+0x84>
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <StartBlink03+0xb4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fe23 	bl	8004754 <osThreadGetState>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d004      	beq.n	8000b1e <StartBlink03+0x8e>
			  {
				  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <StartBlink03+0xb8>)
 8000b1a:	f001 f9ee 	bl	8001efa <HAL_GPIO_TogglePin>
			  }

			  /* Release the mutex, disinheriting the higher priority again */
			  if (osMutexRelease(mutex01Handle) != osOK)
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <StartBlink03+0xac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 ffbe 	bl	8004aa4 <osMutexRelease>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0b4      	beq.n	8000a98 <StartBlink03+0x8>
			  {
				  /* Toggle LED3 to indicate error */
				  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <StartBlink03+0xb8>)
 8000b34:	f001 f9e1 	bl	8001efa <HAL_GPIO_TogglePin>
	  if (osMutexAcquire(mutex01Handle, 0) == osOK)
 8000b38:	e7ae      	b.n	8000a98 <StartBlink03+0x8>
 8000b3a:	bf00      	nop
 8000b3c:	20004e10 	.word	0x20004e10
 8000b40:	20004dc0 	.word	0x20004dc0
 8000b44:	20004dc4 	.word	0x20004dc4
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	20000028 	.word	0x20000028

08000b50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b62:	f000 fa77 	bl	8001054 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40001000 	.word	0x40001000

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	f06f 0001 	mvn.w	r0, #1
 8000bc2:	f000 fb41 	bl	8001248 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a4e      	ldr	r2, [pc, #312]	; (8000d2c <HAL_ETH_MspInit+0x158>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	f040 8096 	bne.w	8000d24 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bf8:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a4c      	ldr	r2, [pc, #304]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c0c:	623b      	str	r3, [r7, #32]
 8000c0e:	6a3b      	ldr	r3, [r7, #32]
 8000c10:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a46      	ldr	r2, [pc, #280]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c24:	61fb      	str	r3, [r7, #28]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	4b41      	ldr	r3, [pc, #260]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a3a      	ldr	r2, [pc, #232]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b35      	ldr	r3, [pc, #212]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	4a34      	ldr	r2, [pc, #208]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6313      	str	r3, [r2, #48]	; 0x30
 8000c64:	4b32      	ldr	r3, [pc, #200]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a2e      	ldr	r2, [pc, #184]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a28      	ldr	r2, [pc, #160]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <HAL_ETH_MspInit+0x15c>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca0:	2332      	movs	r3, #50	; 0x32
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <HAL_ETH_MspInit+0x160>)
 8000cbc:	f000 ff5a 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cc0:	2386      	movs	r3, #134	; 0x86
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4817      	ldr	r0, [pc, #92]	; (8000d38 <HAL_ETH_MspInit+0x164>)
 8000cdc:	f000 ff4a 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480f      	ldr	r0, [pc, #60]	; (8000d3c <HAL_ETH_MspInit+0x168>)
 8000cfe:	f000 ff39 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d14:	230b      	movs	r3, #11
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <HAL_ETH_MspInit+0x16c>)
 8000d20:	f000 ff28 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40028000 	.word	0x40028000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40021800 	.word	0x40021800

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0x7c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d128      	bne.n	8000db8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da8:	2307      	movs	r3, #7
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000db4:	f000 fede 	bl	8001b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	; 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dec:	d141      	bne.n	8000e72 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e18:	230a      	movs	r3, #10
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4817      	ldr	r0, [pc, #92]	; (8000e80 <HAL_PCD_MspInit+0xb4>)
 8000e24:	f000 fea6 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4810      	ldr	r0, [pc, #64]	; (8000e80 <HAL_PCD_MspInit+0xb4>)
 8000e3e:	f000 fe99 	bl	8001b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000

08000e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08c      	sub	sp, #48	; 0x30
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	2036      	movs	r0, #54	; 0x36
 8000e9a:	f000 f9d5 	bl	8001248 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000e9e:	2036      	movs	r0, #54	; 0x36
 8000ea0:	f000 f9ee 	bl	8001280 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <HAL_InitTick+0xa0>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	4a1e      	ldr	r2, [pc, #120]	; (8000f24 <HAL_InitTick+0xa0>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <HAL_InitTick+0xa0>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ebc:	f107 0210 	add.w	r2, r7, #16
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fde2 	bl	8002a90 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ecc:	f001 fdb8 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <HAL_InitTick+0xa4>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	0c9b      	lsrs	r3, r3, #18
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_InitTick+0xa8>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <HAL_InitTick+0xac>)
 8000ee8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_InitTick+0xa8>)
 8000eec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <HAL_InitTick+0xa8>)
 8000ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_InitTick+0xa8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_InitTick+0xa8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <HAL_InitTick+0xa8>)
 8000f06:	f002 f9e3 	bl	80032d0 <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d104      	bne.n	8000f1a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <HAL_InitTick+0xa8>)
 8000f12:	f002 fa13 	bl	800333c <HAL_TIM_Base_Start_IT>
 8000f16:	4603      	mov	r3, r0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3730      	adds	r7, #48	; 0x30
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	431bde83 	.word	0x431bde83
 8000f2c:	20004e14 	.word	0x20004e14
 8000f30:	40001000 	.word	0x40001000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <TIM6_DAC_IRQHandler+0x10>)
 8000f6e:	f002 fa0f 	bl	8003390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20004e14 	.word	0x20004e14

08000f7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <SystemInit+0x5c>)
 8000f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f86:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <SystemInit+0x5c>)
 8000f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <SystemInit+0x60>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <SystemInit+0x60>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <SystemInit+0x60>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <SystemInit+0x60>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <SystemInit+0x60>)
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <SystemInit+0x64>)
 8000faa:	4013      	ands	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <SystemInit+0x60>)
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <SystemInit+0x68>)
 8000fb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <SystemInit+0x60>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <SystemInit+0x60>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x60>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SystemInit+0x5c>)
 8000fc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fcc:	609a      	str	r2, [r3, #8]
#endif
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	fef6ffff 	.word	0xfef6ffff
 8000fe4:	24003010 	.word	0x24003010

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001020 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fee:	e003      	b.n	8000ff8 <LoopCopyDataInit>

08000ff0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ff2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff6:	3104      	adds	r1, #4

08000ff8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff8:	480b      	ldr	r0, [pc, #44]	; (8001028 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ffc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001000:	d3f6      	bcc.n	8000ff0 <CopyDataInit>
  ldr  r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001004:	e002      	b.n	800100c <LoopFillZerobss>

08001006 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001006:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001008:	f842 3b04 	str.w	r3, [r2], #4

0800100c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001010:	d3f9      	bcc.n	8001006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001012:	f7ff ffb3 	bl	8000f7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f006 ffc1 	bl	8007f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fa79 	bl	8000510 <main>
  bx  lr    
 800101e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001020:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001024:	08008098 	.word	0x08008098
  ldr  r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800102c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001030:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001034:	20004e98 	.word	0x20004e98

08001038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC_IRQHandler>

0800103a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f8f7 	bl	8001232 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001044:	2000      	movs	r0, #0
 8001046:	f7ff ff1d 	bl	8000e84 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800104a:	f7ff fd9b 	bl	8000b84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000004 	.word	0x20000004
 8001078:	20004e54 	.word	0x20004e54

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20004e54 	.word	0x20004e54

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_Delay+0x40>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000004 	.word	0x20000004

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <__NVIC_SetPriorityGrouping+0x40>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	4313      	orrs	r3, r2
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x40>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	05fa0000 	.word	0x05fa0000

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff4c 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125a:	f7ff ff61 	bl	8001120 <__NVIC_GetPriorityGrouping>
 800125e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	6978      	ldr	r0, [r7, #20]
 8001266:	f7ff ffb1 	bl	80011cc <NVIC_EncodePriority>
 800126a:	4602      	mov	r2, r0
 800126c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff80 	bl	8001178 <__NVIC_SetPriority>
}
 8001278:	bf00      	nop
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff54 	bl	800113c <__NVIC_EnableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80012ac:	4ba9      	ldr	r3, [pc, #676]	; (8001554 <HAL_ETH_Init+0x2b8>)
 80012ae:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e183      	b.n	80015ca <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fc7c 	bl	8000bd4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012dc:	4b9e      	ldr	r3, [pc, #632]	; (8001558 <HAL_ETH_Init+0x2bc>)
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	4a9d      	ldr	r2, [pc, #628]	; (8001558 <HAL_ETH_Init+0x2bc>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6453      	str	r3, [r2, #68]	; 0x44
 80012e8:	4b9b      	ldr	r3, [pc, #620]	; (8001558 <HAL_ETH_Init+0x2bc>)
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012f4:	4b99      	ldr	r3, [pc, #612]	; (800155c <HAL_ETH_Init+0x2c0>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a98      	ldr	r2, [pc, #608]	; (800155c <HAL_ETH_Init+0x2c0>)
 80012fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012fe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001300:	4b96      	ldr	r3, [pc, #600]	; (800155c <HAL_ETH_Init+0x2c0>)
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1b      	ldr	r3, [r3, #32]
 8001308:	4994      	ldr	r1, [pc, #592]	; (800155c <HAL_ETH_Init+0x2c0>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f042 0201 	orr.w	r2, r2, #1
 8001320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001324:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001326:	f7ff fea9 	bl	800107c <HAL_GetTick>
 800132a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800132c:	e011      	b.n	8001352 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800132e:	f7ff fea5 	bl	800107c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800133c:	d909      	bls.n	8001352 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e13b      	b.n	80015ca <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e4      	bne.n	800132e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f023 031c 	bic.w	r3, r3, #28
 8001372:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001374:	f001 fb58 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8001378:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4a78      	ldr	r2, [pc, #480]	; (8001560 <HAL_ETH_Init+0x2c4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d908      	bls.n	8001394 <HAL_ETH_Init+0xf8>
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4a77      	ldr	r2, [pc, #476]	; (8001564 <HAL_ETH_Init+0x2c8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d804      	bhi.n	8001394 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f043 0308 	orr.w	r3, r3, #8
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	e027      	b.n	80013e4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	4a73      	ldr	r2, [pc, #460]	; (8001564 <HAL_ETH_Init+0x2c8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d908      	bls.n	80013ae <HAL_ETH_Init+0x112>
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	4a72      	ldr	r2, [pc, #456]	; (8001568 <HAL_ETH_Init+0x2cc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d804      	bhi.n	80013ae <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f043 030c 	orr.w	r3, r3, #12
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	e01a      	b.n	80013e4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4a6d      	ldr	r2, [pc, #436]	; (8001568 <HAL_ETH_Init+0x2cc>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d903      	bls.n	80013be <HAL_ETH_Init+0x122>
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4a6c      	ldr	r2, [pc, #432]	; (800156c <HAL_ETH_Init+0x2d0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d911      	bls.n	80013e2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4a6a      	ldr	r2, [pc, #424]	; (800156c <HAL_ETH_Init+0x2d0>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d908      	bls.n	80013d8 <HAL_ETH_Init+0x13c>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4a69      	ldr	r2, [pc, #420]	; (8001570 <HAL_ETH_Init+0x2d4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d804      	bhi.n	80013d8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	e005      	b.n	80013e4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	e000      	b.n	80013e4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013e2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80013ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f956 	bl	80016a4 <HAL_ETH_WritePHYRegister>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001402:	6939      	ldr	r1, [r7, #16]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f9b3 	bl	8001770 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e0d9      	b.n	80015ca <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001416:	20ff      	movs	r0, #255	; 0xff
 8001418:	f7ff fe3c 	bl	8001094 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a7 	beq.w	8001574 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001426:	f7ff fe29 	bl	800107c <HAL_GetTick>
 800142a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	461a      	mov	r2, r3
 8001432:	2101      	movs	r1, #1
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f8cd 	bl	80015d4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800143a:	f7ff fe1f 	bl	800107c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f241 3288 	movw	r2, #5000	; 0x1388
 8001448:	4293      	cmp	r3, r2
 800144a:	d90f      	bls.n	800146c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001450:	6939      	ldr	r1, [r7, #16]
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f98c 	bl	8001770 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e0ae      	b.n	80015ca <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0da      	beq.n	800142c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001476:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800147a:	2100      	movs	r1, #0
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f911 	bl	80016a4 <HAL_ETH_WritePHYRegister>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00b      	beq.n	80014a0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800148c:	6939      	ldr	r1, [r7, #16]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f96e 	bl	8001770 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800149c:	2301      	movs	r3, #1
 800149e:	e094      	b.n	80015ca <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80014a0:	f7ff fdec 	bl	800107c <HAL_GetTick>
 80014a4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	461a      	mov	r2, r3
 80014ac:	2101      	movs	r1, #1
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f890 	bl	80015d4 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80014b4:	f7ff fde2 	bl	800107c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d90f      	bls.n	80014e6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014ca:	6939      	ldr	r1, [r7, #16]
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f94f 	bl	8001770 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e071      	b.n	80015ca <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f003 0320 	and.w	r3, r3, #32
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0da      	beq.n	80014a6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	461a      	mov	r2, r3
 80014f6:	211f      	movs	r1, #31
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f86b 	bl	80015d4 <HAL_ETH_ReadPHYRegister>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00b      	beq.n	800151c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001508:	6939      	ldr	r1, [r7, #16]
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f930 	bl	8001770 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001518:	2301      	movs	r3, #1
 800151a:	e056      	b.n	80015ca <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0310 	and.w	r3, r3, #16
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	e002      	b.n	8001536 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	e037      	b.n	80015b8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e032      	b.n	80015b8 <HAL_ETH_Init+0x31c>
 8001552:	bf00      	nop
 8001554:	03938700 	.word	0x03938700
 8001558:	40023800 	.word	0x40023800
 800155c:	40013800 	.word	0x40013800
 8001560:	01312cff 	.word	0x01312cff
 8001564:	02160ebf 	.word	0x02160ebf
 8001568:	039386ff 	.word	0x039386ff
 800156c:	05f5e0ff 	.word	0x05f5e0ff
 8001570:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	08db      	lsrs	r3, r3, #3
 800157a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001584:	4313      	orrs	r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f000 f889 	bl	80016a4 <HAL_ETH_WritePHYRegister>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800159c:	6939      	ldr	r1, [r7, #16]
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8e6 	bl	8001770 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e00c      	b.n	80015ca <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80015b0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80015b4:	f7ff fd6e 	bl	8001094 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8d8 	bl	8001770 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3720      	adds	r7, #32
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop

080015d4 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	460b      	mov	r3, r1
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b82      	cmp	r3, #130	; 0x82
 80015f4:	d101      	bne.n	80015fa <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80015f6:	2302      	movs	r3, #2
 80015f8:	e050      	b.n	800169c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2282      	movs	r2, #130	; 0x82
 80015fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f003 031c 	and.w	r3, r3, #28
 8001610:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8a1b      	ldrh	r3, [r3, #16]
 8001616:	02db      	lsls	r3, r3, #11
 8001618:	b29b      	uxth	r3, r3
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001620:	897b      	ldrh	r3, [r7, #10]
 8001622:	019b      	lsls	r3, r3, #6
 8001624:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001628:	697a      	ldr	r2, [r7, #20]
 800162a:	4313      	orrs	r3, r2
 800162c:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f023 0302 	bic.w	r3, r3, #2
 8001634:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001646:	f7ff fd19 	bl	800107c <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800164c:	e015      	b.n	800167a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800164e:	f7ff fd15 	bl	800107c <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165c:	d309      	bcc.n	8001672 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e014      	b.n	800169c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1e4      	bne.n	800164e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	460b      	mov	r3, r1
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b42      	cmp	r3, #66	; 0x42
 80016c4:	d101      	bne.n	80016ca <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80016c6:	2302      	movs	r3, #2
 80016c8:	e04e      	b.n	8001768 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2242      	movs	r2, #66	; 0x42
 80016ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 031c 	and.w	r3, r3, #28
 80016e0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8a1b      	ldrh	r3, [r3, #16]
 80016e6:	02db      	lsls	r3, r3, #11
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80016f0:	897b      	ldrh	r3, [r7, #10]
 80016f2:	019b      	lsls	r3, r3, #6
 80016f4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001720:	f7ff fcac 	bl	800107c <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001726:	e015      	b.n	8001754 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001728:	f7ff fca8 	bl	800107c <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001736:	d309      	bcc.n	800174c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e00d      	b.n	8001768 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1e4      	bne.n	8001728 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b0b0      	sub	sp, #192	; 0xc0
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800178c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001794:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800179e:	2300      	movs	r3, #0
 80017a0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d103      	bne.n	80017be <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80017b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ba:	663b      	str	r3, [r7, #96]	; 0x60
 80017bc:	e001      	b.n	80017c2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80017c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80017cc:	2300      	movs	r3, #0
 80017ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80017d8:	2300      	movs	r3, #0
 80017da:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80017dc:	2340      	movs	r3, #64	; 0x40
 80017de:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800182e:	2300      	movs	r3, #0
 8001830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001844:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001848:	4bab      	ldr	r3, [pc, #684]	; (8001af8 <ETH_MACDMAConfig+0x388>)
 800184a:	4013      	ands	r3, r2
 800184c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001850:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001854:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001858:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800185a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800185c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001862:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001866:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800186a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001870:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001874:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001878:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800187a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800187c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800187e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001880:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001884:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001886:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800188a:	4313      	orrs	r3, r2
 800188c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001898:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80018a4:	2001      	movs	r0, #1
 80018a6:	f7ff fbf5 	bl	8001094 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80018b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018b8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80018ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80018bc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80018be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80018c2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80018c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80018c8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80018ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80018ce:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80018d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80018d4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80018d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80018e0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80018e2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ee:	2001      	movs	r0, #1
 80018f0:	f7ff fbd0 	bl	8001094 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018fc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001906:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001910:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800191c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001920:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001924:	4013      	ands	r3, r2
 8001926:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800192a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800192e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001930:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001934:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800193a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800193c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001940:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001946:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001948:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800194c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800194e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001952:	4313      	orrs	r3, r2
 8001954:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001960:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800196c:	2001      	movs	r0, #1
 800196e:	f7ff fb91 	bl	8001094 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800197a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800197c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001980:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001996:	2001      	movs	r0, #1
 8001998:	f7ff fb7c 	bl	8001094 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019a4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80019aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ae:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80019b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80019ca:	2304      	movs	r3, #4
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80019ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80019d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80019fa:	4413      	add	r3, r2
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001a02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <ETH_MACDMAConfig+0x38c>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a0e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001a10:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a12:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001a14:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001a16:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001a18:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001a1a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001a1c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001a1e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001a20:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001a22:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001a24:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001a26:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001a2a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001a2e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a34:	4313      	orrs	r3, r2
 8001a36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001a42:	4413      	add	r3, r2
 8001a44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a48:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001a52:	4413      	add	r3, r2
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f7ff fb1a 	bl	8001094 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	f241 0318 	movw	r3, #4120	; 0x1018
 8001a68:	4413      	add	r3, r2
 8001a6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a6e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a74:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001a78:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a7c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001a80:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a84:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001a86:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001a8a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff faf3 	bl	8001094 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aba:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d10d      	bne.n	8001ae0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f241 031c 	movw	r3, #4124	; 0x101c
 8001acc:	4413      	add	r3, r2
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6811      	ldr	r1, [r2, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <ETH_MACDMAConfig+0x390>)
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	f241 031c 	movw	r3, #4124	; 0x101c
 8001adc:	440b      	add	r3, r1
 8001ade:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f80b 	bl	8001b04 <ETH_MACAddressConfig>
}
 8001aee:	bf00      	nop
 8001af0:	37c0      	adds	r7, #192	; 0xc0
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	ff20810f 	.word	0xff20810f
 8001afc:	f8de3f23 	.word	0xf8de3f23
 8001b00:	00010040 	.word	0x00010040

08001b04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3305      	adds	r3, #5
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	3204      	adds	r2, #4
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <ETH_MACAddressConfig+0x68>)
 8001b26:	4413      	add	r3, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3303      	adds	r3, #3
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	061a      	lsls	r2, r3, #24
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <ETH_MACAddressConfig+0x6c>)
 8001b56:	4413      	add	r3, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	6013      	str	r3, [r2, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40028040 	.word	0x40028040
 8001b70:	40028044 	.word	0x40028044

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	e175      	b.n	8001e80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 8164 	bne.w	8001e7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x4e>
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b12      	cmp	r3, #18
 8001bc0:	d123      	bne.n	8001c0a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	691a      	ldr	r2, [r3, #16]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	08da      	lsrs	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3208      	adds	r2, #8
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0203 	and.w	r2, r3, #3
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d00b      	beq.n	8001c5e <HAL_GPIO_Init+0xea>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d007      	beq.n	8001c5e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c52:	2b11      	cmp	r3, #17
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80be 	beq.w	8001e7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	4b65      	ldr	r3, [pc, #404]	; (8001e94 <HAL_GPIO_Init+0x320>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a64      	ldr	r2, [pc, #400]	; (8001e94 <HAL_GPIO_Init+0x320>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b62      	ldr	r3, [pc, #392]	; (8001e94 <HAL_GPIO_Init+0x320>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d16:	4a60      	ldr	r2, [pc, #384]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <HAL_GPIO_Init+0x328>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d037      	beq.n	8001db2 <HAL_GPIO_Init+0x23e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a56      	ldr	r2, [pc, #344]	; (8001ea0 <HAL_GPIO_Init+0x32c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d031      	beq.n	8001dae <HAL_GPIO_Init+0x23a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a55      	ldr	r2, [pc, #340]	; (8001ea4 <HAL_GPIO_Init+0x330>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d02b      	beq.n	8001daa <HAL_GPIO_Init+0x236>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a54      	ldr	r2, [pc, #336]	; (8001ea8 <HAL_GPIO_Init+0x334>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d025      	beq.n	8001da6 <HAL_GPIO_Init+0x232>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a53      	ldr	r2, [pc, #332]	; (8001eac <HAL_GPIO_Init+0x338>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01f      	beq.n	8001da2 <HAL_GPIO_Init+0x22e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a52      	ldr	r2, [pc, #328]	; (8001eb0 <HAL_GPIO_Init+0x33c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d019      	beq.n	8001d9e <HAL_GPIO_Init+0x22a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <HAL_GPIO_Init+0x340>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a50      	ldr	r2, [pc, #320]	; (8001eb8 <HAL_GPIO_Init+0x344>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x222>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4f      	ldr	r2, [pc, #316]	; (8001ebc <HAL_GPIO_Init+0x348>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x21e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a4e      	ldr	r2, [pc, #312]	; (8001ec0 <HAL_GPIO_Init+0x34c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x21a>
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	e012      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d8e:	230a      	movs	r3, #10
 8001d90:	e010      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d92:	2308      	movs	r3, #8
 8001d94:	e00e      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d96:	2307      	movs	r3, #7
 8001d98:	e00c      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00a      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e008      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e004      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_GPIO_Init+0x240>
 8001db2:	2300      	movs	r3, #0
 8001db4:	69fa      	ldr	r2, [r7, #28]
 8001db6:	f002 0203 	and.w	r2, r2, #3
 8001dba:	0092      	lsls	r2, r2, #2
 8001dbc:	4093      	lsls	r3, r2
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dc4:	4934      	ldr	r1, [pc, #208]	; (8001e98 <HAL_GPIO_Init+0x324>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	089b      	lsrs	r3, r3, #2
 8001dca:	3302      	adds	r3, #2
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001df6:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e20:	4a28      	ldr	r2, [pc, #160]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e26:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4a:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e74:	4a13      	ldr	r2, [pc, #76]	; (8001ec4 <HAL_GPIO_Init+0x350>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	2b0f      	cmp	r3, #15
 8001e84:	f67f ae86 	bls.w	8001b94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3724      	adds	r7, #36	; 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40013800 	.word	0x40013800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	40020c00 	.word	0x40020c00
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40021400 	.word	0x40021400
 8001eb4:	40021800 	.word	0x40021800
 8001eb8:	40021c00 	.word	0x40021c00
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40022400 	.word	0x40022400
 8001ec4:	40013c00 	.word	0x40013c00

08001ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	807b      	strh	r3, [r7, #2]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ed8:	787b      	ldrb	r3, [r7, #1]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ede:	887a      	ldrh	r2, [r7, #2]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ee4:	e003      	b.n	8001eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ee6:	887b      	ldrh	r3, [r7, #2]
 8001ee8:	041a      	lsls	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	619a      	str	r2, [r3, #24]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d104      	bne.n	8001f1e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	041a      	lsls	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001f1c:	e002      	b.n	8001f24 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f32:	b08f      	sub	sp, #60	; 0x3c
 8001f34:	af0a      	add	r7, sp, #40	; 0x28
 8001f36:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e10a      	b.n	8002158 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe ff38 	bl	8000dcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2203      	movs	r2, #3
 8001f60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 f87b 	bl	8004064 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	687e      	ldr	r6, [r7, #4]
 8001f76:	466d      	mov	r5, sp
 8001f78:	f106 0410 	add.w	r4, r6, #16
 8001f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f88:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8c:	1d33      	adds	r3, r6, #4
 8001f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f90:	6838      	ldr	r0, [r7, #0]
 8001f92:	f002 f80f 	bl	8003fb4 <USB_CoreInit>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0d7      	b.n	8002158 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2100      	movs	r1, #0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 f869 	bl	8004086 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e04a      	b.n	8002050 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	333d      	adds	r3, #61	; 0x3d
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	333c      	adds	r3, #60	; 0x3c
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	b298      	uxth	r0, r3
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3342      	adds	r3, #66	; 0x42
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	1a9b      	subs	r3, r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	333f      	adds	r3, #63	; 0x3f
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3344      	adds	r3, #68	; 0x44
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	1a9b      	subs	r3, r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3348      	adds	r3, #72	; 0x48
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	3350      	adds	r3, #80	; 0x50
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	3301      	adds	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	d3af      	bcc.n	8001fba <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	e044      	b.n	80020ea <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	3301      	adds	r3, #1
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3b5      	bcc.n	8002060 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	687e      	ldr	r6, [r7, #4]
 80020fc:	466d      	mov	r5, sp
 80020fe:	f106 0410 	add.w	r4, r6, #16
 8002102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002112:	1d33      	adds	r3, r6, #4
 8002114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002116:	6838      	ldr	r0, [r7, #0]
 8002118:	f001 ffe0 	bl	80040dc <USB_DevInit>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2202      	movs	r2, #2
 8002126:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e014      	b.n	8002158 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2b01      	cmp	r3, #1
 8002144:	d102      	bne.n	800214c <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f80a 	bl	8002160 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f002 f9a0 	bl	8004496 <USB_DevDisconnect>

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002160 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002190:	4313      	orrs	r3, r2
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	10000003 	.word	0x10000003

080021a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40007000 	.word	0x40007000

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e25c      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8087 	beq.w	80022fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ec:	4b96      	ldr	r3, [pc, #600]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d00c      	beq.n	8002212 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f8:	4b93      	ldr	r3, [pc, #588]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d112      	bne.n	800222a <HAL_RCC_OscConfig+0x62>
 8002204:	4b90      	ldr	r3, [pc, #576]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002210:	d10b      	bne.n	800222a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002212:	4b8d      	ldr	r3, [pc, #564]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d06c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x130>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d168      	bne.n	80022f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e236      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d106      	bne.n	8002242 <HAL_RCC_OscConfig+0x7a>
 8002234:	4b84      	ldr	r3, [pc, #528]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a83      	ldr	r2, [pc, #524]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	e02e      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x9c>
 800224a:	4b7f      	ldr	r3, [pc, #508]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7e      	ldr	r2, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b7c      	ldr	r3, [pc, #496]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a7b      	ldr	r2, [pc, #492]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 800225c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0xc0>
 800226e:	4b76      	ldr	r3, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a75      	ldr	r2, [pc, #468]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b73      	ldr	r3, [pc, #460]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a72      	ldr	r2, [pc, #456]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xd8>
 8002288:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6e      	ldr	r2, [pc, #440]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b6c      	ldr	r3, [pc, #432]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a6b      	ldr	r2, [pc, #428]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe fee8 	bl	800107c <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7fe fee4 	bl	800107c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1ea      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b61      	ldr	r3, [pc, #388]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xe8>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fed4 	bl	800107c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7fe fed0 	bl	800107c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1d6      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b57      	ldr	r3, [pc, #348]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x110>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d069      	beq.n	80023da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002306:	4b50      	ldr	r3, [pc, #320]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b4d      	ldr	r3, [pc, #308]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x190>
 800231e:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b47      	ldr	r3, [pc, #284]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x17a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1aa      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b41      	ldr	r3, [pc, #260]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	493d      	ldr	r1, [pc, #244]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e040      	b.n	80023da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d023      	beq.n	80023a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a38      	ldr	r2, [pc, #224]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236c:	f7fe fe86 	bl	800107c <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002374:	f7fe fe82 	bl	800107c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e188      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	4b30      	ldr	r3, [pc, #192]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f0      	beq.n	8002374 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b2d      	ldr	r3, [pc, #180]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4929      	ldr	r1, [pc, #164]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	600b      	str	r3, [r1, #0]
 80023a6:	e018      	b.n	80023da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a8:	4b27      	ldr	r3, [pc, #156]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a26      	ldr	r2, [pc, #152]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fe62 	bl	800107c <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023bc:	f7fe fe5e 	bl	800107c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e164      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d038      	beq.n	8002458 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d019      	beq.n	8002422 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80023f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7fe fe3f 	bl	800107c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002400:	e008      	b.n	8002414 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002402:	f7fe fe3b 	bl	800107c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d901      	bls.n	8002414 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e141      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_RCC_OscConfig+0x23a>
 8002420:	e01a      	b.n	8002458 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	4a08      	ldr	r2, [pc, #32]	; (8002448 <HAL_RCC_OscConfig+0x280>)
 8002428:	f023 0301 	bic.w	r3, r3, #1
 800242c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fe25 	bl	800107c <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002436:	f7fe fe21 	bl	800107c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d903      	bls.n	800244c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e127      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
 8002448:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244c:	4b94      	ldr	r3, [pc, #592]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 800244e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1ee      	bne.n	8002436 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a4 	beq.w	80025ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002466:	4b8e      	ldr	r3, [pc, #568]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b8b      	ldr	r3, [pc, #556]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a8a      	ldr	r2, [pc, #552]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248e:	4b85      	ldr	r3, [pc, #532]	; (80026a4 <HAL_RCC_OscConfig+0x4dc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800249a:	4b82      	ldr	r3, [pc, #520]	; (80026a4 <HAL_RCC_OscConfig+0x4dc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a81      	ldr	r2, [pc, #516]	; (80026a4 <HAL_RCC_OscConfig+0x4dc>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fde9 	bl	800107c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7fe fde5 	bl	800107c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b64      	cmp	r3, #100	; 0x64
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0eb      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b78      	ldr	r3, [pc, #480]	; (80026a4 <HAL_RCC_OscConfig+0x4dc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x31a>
 80024d4:	4b72      	ldr	r3, [pc, #456]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d8:	4a71      	ldr	r2, [pc, #452]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	6713      	str	r3, [r2, #112]	; 0x70
 80024e0:	e02d      	b.n	800253e <HAL_RCC_OscConfig+0x376>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x33c>
 80024ea:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	4a6c      	ldr	r2, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80024f0:	f023 0301 	bic.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	; 0x70
 80024f6:	4b6a      	ldr	r3, [pc, #424]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	4a69      	ldr	r2, [pc, #420]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80024fc:	f023 0304 	bic.w	r3, r3, #4
 8002500:	6713      	str	r3, [r2, #112]	; 0x70
 8002502:	e01c      	b.n	800253e <HAL_RCC_OscConfig+0x376>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b05      	cmp	r3, #5
 800250a:	d10c      	bne.n	8002526 <HAL_RCC_OscConfig+0x35e>
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a63      	ldr	r2, [pc, #396]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002512:	f043 0304 	orr.w	r3, r3, #4
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a60      	ldr	r2, [pc, #384]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	e00b      	b.n	800253e <HAL_RCC_OscConfig+0x376>
 8002526:	4b5e      	ldr	r3, [pc, #376]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	4a5d      	ldr	r2, [pc, #372]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	6713      	str	r3, [r2, #112]	; 0x70
 8002532:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	4a5a      	ldr	r2, [pc, #360]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d015      	beq.n	8002572 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7fe fd99 	bl	800107c <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe fd95 	bl	800107c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e099      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002564:	4b4e      	ldr	r3, [pc, #312]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0ee      	beq.n	800254e <HAL_RCC_OscConfig+0x386>
 8002570:	e014      	b.n	800259c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe fd83 	bl	800107c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fd7f 	bl	800107c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e083      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1ee      	bne.n	800257a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259c:	7dfb      	ldrb	r3, [r7, #23]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d06f      	beq.n	8002696 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b6:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d067      	beq.n	8002692 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d149      	bne.n	800265e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b35      	ldr	r3, [pc, #212]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a34      	ldr	r2, [pc, #208]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80025d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fd51 	bl	800107c <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025de:	f7fe fd4d 	bl	800107c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e053      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	019b      	lsls	r3, r3, #6
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002612:	085b      	lsrs	r3, r3, #1
 8002614:	3b01      	subs	r3, #1
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	061b      	lsls	r3, r3, #24
 8002620:	4313      	orrs	r3, r2
 8002622:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002624:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002628:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262a:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002636:	f7fe fd21 	bl	800107c <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263e:	f7fe fd1d 	bl	800107c <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e023      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f0      	beq.n	800263e <HAL_RCC_OscConfig+0x476>
 800265c:	e01b      	b.n	8002696 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a0f      	ldr	r2, [pc, #60]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fd07 	bl	800107c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe fd03 	bl	800107c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e009      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_OscConfig+0x4d8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x4aa>
 8002690:	e001      	b.n	8002696 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000

080026a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0ce      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b69      	ldr	r3, [pc, #420]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d910      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b66      	ldr	r3, [pc, #408]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 020f 	bic.w	r2, r3, #15
 80026d6:	4964      	ldr	r1, [pc, #400]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b62      	ldr	r3, [pc, #392]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0b6      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d020      	beq.n	800273e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800270e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002720:	4b52      	ldr	r3, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a51      	ldr	r2, [pc, #324]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800272a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272c:	4b4f      	ldr	r3, [pc, #316]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	494c      	ldr	r1, [pc, #304]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d040      	beq.n	80027cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d107      	bne.n	8002762 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b46      	ldr	r3, [pc, #280]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d115      	bne.n	800278a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e07d      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b40      	ldr	r3, [pc, #256]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e071      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b3c      	ldr	r3, [pc, #240]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e069      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b38      	ldr	r3, [pc, #224]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4935      	ldr	r1, [pc, #212]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800279c:	f7fe fc6e 	bl	800107c <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7fe fc6a 	bl	800107c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e051      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2c      	ldr	r3, [pc, #176]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d210      	bcs.n	80027fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 020f 	bic.w	r2, r3, #15
 80027e2:	4921      	ldr	r1, [pc, #132]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d001      	beq.n	80027fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e030      	b.n	800285e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4915      	ldr	r1, [pc, #84]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	490d      	ldr	r1, [pc, #52]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800283a:	f000 f81d 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 800283e:	4601      	mov	r1, r0
 8002840:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	4a09      	ldr	r2, [pc, #36]	; (8002870 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	5cd3      	ldrb	r3, [r2, r3]
 800284e:	fa21 f303 	lsr.w	r3, r1, r3
 8002852:	4a08      	ldr	r2, [pc, #32]	; (8002874 <HAL_RCC_ClockConfig+0x1cc>)
 8002854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe fb14 	bl	8000e84 <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	08008070 	.word	0x08008070
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	2300      	movs	r3, #0
 8002888:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b04      	cmp	r3, #4
 8002898:	d007      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x32>
 800289a:	2b08      	cmp	r3, #8
 800289c:	d008      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x38>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 80b4 	bne.w	8002a0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a4:	4b5e      	ldr	r3, [pc, #376]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80028a6:	60bb      	str	r3, [r7, #8]
       break;
 80028a8:	e0b3      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028aa:	4b5e      	ldr	r3, [pc, #376]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80028ac:	60bb      	str	r3, [r7, #8]
      break;
 80028ae:	e0b0      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b0:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028ba:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d04a      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028c6:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	099b      	lsrs	r3, r3, #6
 80028cc:	f04f 0400 	mov.w	r4, #0
 80028d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	ea03 0501 	and.w	r5, r3, r1
 80028dc:	ea04 0602 	and.w	r6, r4, r2
 80028e0:	4629      	mov	r1, r5
 80028e2:	4632      	mov	r2, r6
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	f04f 0400 	mov.w	r4, #0
 80028ec:	0154      	lsls	r4, r2, #5
 80028ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80028f2:	014b      	lsls	r3, r1, #5
 80028f4:	4619      	mov	r1, r3
 80028f6:	4622      	mov	r2, r4
 80028f8:	1b49      	subs	r1, r1, r5
 80028fa:	eb62 0206 	sbc.w	r2, r2, r6
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	f04f 0400 	mov.w	r4, #0
 8002906:	0194      	lsls	r4, r2, #6
 8002908:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800290c:	018b      	lsls	r3, r1, #6
 800290e:	1a5b      	subs	r3, r3, r1
 8002910:	eb64 0402 	sbc.w	r4, r4, r2
 8002914:	f04f 0100 	mov.w	r1, #0
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	00e2      	lsls	r2, r4, #3
 800291e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002922:	00d9      	lsls	r1, r3, #3
 8002924:	460b      	mov	r3, r1
 8002926:	4614      	mov	r4, r2
 8002928:	195b      	adds	r3, r3, r5
 800292a:	eb44 0406 	adc.w	r4, r4, r6
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	0262      	lsls	r2, r4, #9
 8002938:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800293c:	0259      	lsls	r1, r3, #9
 800293e:	460b      	mov	r3, r1
 8002940:	4614      	mov	r4, r2
 8002942:	4618      	mov	r0, r3
 8002944:	4621      	mov	r1, r4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f04f 0400 	mov.w	r4, #0
 800294c:	461a      	mov	r2, r3
 800294e:	4623      	mov	r3, r4
 8002950:	f7fd fc5e 	bl	8000210 <__aeabi_uldivmod>
 8002954:	4603      	mov	r3, r0
 8002956:	460c      	mov	r4, r1
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e049      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295c:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	f04f 0400 	mov.w	r4, #0
 8002966:	f240 11ff 	movw	r1, #511	; 0x1ff
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	ea03 0501 	and.w	r5, r3, r1
 8002972:	ea04 0602 	and.w	r6, r4, r2
 8002976:	4629      	mov	r1, r5
 8002978:	4632      	mov	r2, r6
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	f04f 0400 	mov.w	r4, #0
 8002982:	0154      	lsls	r4, r2, #5
 8002984:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002988:	014b      	lsls	r3, r1, #5
 800298a:	4619      	mov	r1, r3
 800298c:	4622      	mov	r2, r4
 800298e:	1b49      	subs	r1, r1, r5
 8002990:	eb62 0206 	sbc.w	r2, r2, r6
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	f04f 0400 	mov.w	r4, #0
 800299c:	0194      	lsls	r4, r2, #6
 800299e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029a2:	018b      	lsls	r3, r1, #6
 80029a4:	1a5b      	subs	r3, r3, r1
 80029a6:	eb64 0402 	sbc.w	r4, r4, r2
 80029aa:	f04f 0100 	mov.w	r1, #0
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	00e2      	lsls	r2, r4, #3
 80029b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029b8:	00d9      	lsls	r1, r3, #3
 80029ba:	460b      	mov	r3, r1
 80029bc:	4614      	mov	r4, r2
 80029be:	195b      	adds	r3, r3, r5
 80029c0:	eb44 0406 	adc.w	r4, r4, r6
 80029c4:	f04f 0100 	mov.w	r1, #0
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	02a2      	lsls	r2, r4, #10
 80029ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80029d2:	0299      	lsls	r1, r3, #10
 80029d4:	460b      	mov	r3, r1
 80029d6:	4614      	mov	r4, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	4621      	mov	r1, r4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7fd fc13 	bl	8000210 <__aeabi_uldivmod>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	3301      	adds	r3, #1
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	60bb      	str	r3, [r7, #8]
      break;
 8002a0a:	e002      	b.n	8002a12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a0e:	60bb      	str	r3, [r7, #8]
      break;
 8002a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a12:	68bb      	ldr	r3, [r7, #8]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	00f42400 	.word	0x00f42400
 8002a24:	007a1200 	.word	0x007a1200

08002a28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000000 	.word	0x20000000

08002a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a44:	f7ff fff0 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a48:	4601      	mov	r1, r0
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	0a9b      	lsrs	r3, r3, #10
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	4a03      	ldr	r2, [pc, #12]	; (8002a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	08008080 	.word	0x08008080

08002a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a6c:	f7ff ffdc 	bl	8002a28 <HAL_RCC_GetHCLKFreq>
 8002a70:	4601      	mov	r1, r0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	0b5b      	lsrs	r3, r3, #13
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	4a03      	ldr	r2, [pc, #12]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	08008080 	.word	0x08008080

08002a90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	220f      	movs	r2, #15
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002aa0:	4b12      	ldr	r3, [pc, #72]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0203 	and.w	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_RCC_GetClockConfig+0x5c>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	08db      	lsrs	r3, r3, #3
 8002aca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <HAL_RCC_GetClockConfig+0x60>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 020f 	and.w	r2, r3, #15
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	601a      	str	r2, [r3, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40023c00 	.word	0x40023c00

08002af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d012      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b1c:	4b69      	ldr	r3, [pc, #420]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a68      	ldr	r2, [pc, #416]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b26:	6093      	str	r3, [r2, #8]
 8002b28:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	4964      	ldr	r1, [pc, #400]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d017      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	4959      	ldr	r1, [pc, #356]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d017      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b8a:	4b4e      	ldr	r3, [pc, #312]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	494a      	ldr	r1, [pc, #296]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 808b 	beq.w	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bd8:	4b3a      	ldr	r3, [pc, #232]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	4a39      	ldr	r2, [pc, #228]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002be2:	6413      	str	r3, [r2, #64]	; 0x40
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bf0:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a34      	ldr	r2, [pc, #208]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f7fe fa3e 	bl	800107c <HAL_GetTick>
 8002c00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c02:	e008      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7fe fa3a 	bl	800107c <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b64      	cmp	r3, #100	; 0x64
 8002c10:	d901      	bls.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e355      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c16:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d035      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d02e      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c40:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a1a      	ldr	r2, [pc, #104]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c62:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c68:	4b16      	ldr	r3, [pc, #88]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d114      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fa02 	bl	800107c <HAL_GetTick>
 8002c78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fe f9fe 	bl	800107c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e317      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ee      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002caa:	d111      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cac:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cba:	400b      	ands	r3, r1
 8002cbc:	4901      	ldr	r1, [pc, #4]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	0ffffcff 	.word	0x0ffffcff
 8002cd0:	4bb0      	ldr	r3, [pc, #704]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4aaf      	ldr	r2, [pc, #700]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cda:	6093      	str	r3, [r2, #8]
 8002cdc:	4bad      	ldr	r3, [pc, #692]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	49aa      	ldr	r1, [pc, #680]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002cfa:	4ba6      	ldr	r3, [pc, #664]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d00:	4aa4      	ldr	r2, [pc, #656]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d0a:	4ba2      	ldr	r3, [pc, #648]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	499f      	ldr	r1, [pc, #636]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d28:	4b9a      	ldr	r3, [pc, #616]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d36:	4997      	ldr	r1, [pc, #604]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00a      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d4a:	4b92      	ldr	r3, [pc, #584]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d58:	498e      	ldr	r1, [pc, #568]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d6c:	4b89      	ldr	r3, [pc, #548]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d7a:	4986      	ldr	r1, [pc, #536]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d8e:	4b81      	ldr	r3, [pc, #516]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	497d      	ldr	r1, [pc, #500]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002db0:	4b78      	ldr	r3, [pc, #480]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4975      	ldr	r1, [pc, #468]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dd2:	4b70      	ldr	r3, [pc, #448]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd8:	f023 020c 	bic.w	r2, r3, #12
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	496c      	ldr	r1, [pc, #432]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002df4:	4b67      	ldr	r3, [pc, #412]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	4964      	ldr	r1, [pc, #400]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e16:	4b5f      	ldr	r3, [pc, #380]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e24:	495b      	ldr	r1, [pc, #364]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00a      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e38:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	4953      	ldr	r1, [pc, #332]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	494a      	ldr	r1, [pc, #296]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e7c:	4b45      	ldr	r3, [pc, #276]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e8a:	4942      	ldr	r1, [pc, #264]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eac:	4939      	ldr	r1, [pc, #228]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ec0:	4b34      	ldr	r3, [pc, #208]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ece:	4931      	ldr	r1, [pc, #196]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d011      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ee2:	4b2c      	ldr	r3, [pc, #176]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef0:	4928      	ldr	r1, [pc, #160]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002efc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f00:	d101      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f30:	4918      	ldr	r1, [pc, #96]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f44:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f54:	490f      	ldr	r1, [pc, #60]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f6a:	f040 80d8 	bne.w	800311e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7a:	f7fe f87f 	bl	800107c <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f82:	f7fe f87b 	bl	800107c <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	; 0x64
 8002f8e:	d903      	bls.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e196      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002f94:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f98:	4b6c      	ldr	r3, [pc, #432]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ee      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d021      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d11d      	bne.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fb8:	4b64      	ldr	r3, [pc, #400]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbe:	0c1b      	lsrs	r3, r3, #16
 8002fc0:	f003 0303 	and.w	r3, r3, #3
 8002fc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fc6:	4b61      	ldr	r3, [pc, #388]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fcc:	0e1b      	lsrs	r3, r3, #24
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	019a      	lsls	r2, r3, #6
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	071b      	lsls	r3, r3, #28
 8002fec:	4957      	ldr	r1, [pc, #348]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02e      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800301e:	d129      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003020:	4b4a      	ldr	r3, [pc, #296]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003026:	0c1b      	lsrs	r3, r3, #16
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003034:	0f1b      	lsrs	r3, r3, #28
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	019a      	lsls	r2, r3, #6
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	041b      	lsls	r3, r3, #16
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	061b      	lsls	r3, r3, #24
 800304e:	431a      	orrs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	071b      	lsls	r3, r3, #28
 8003054:	493d      	ldr	r1, [pc, #244]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800305c:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800305e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003062:	f023 021f 	bic.w	r2, r3, #31
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	3b01      	subs	r3, #1
 800306c:	4937      	ldr	r1, [pc, #220]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01d      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003080:	4b32      	ldr	r3, [pc, #200]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003086:	0e1b      	lsrs	r3, r3, #24
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800308e:	4b2f      	ldr	r3, [pc, #188]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003094:	0f1b      	lsrs	r3, r3, #28
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	019a      	lsls	r2, r3, #6
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	431a      	orrs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	071b      	lsls	r3, r3, #28
 80030b4:	4925      	ldr	r1, [pc, #148]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d011      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	019a      	lsls	r2, r3, #6
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	041b      	lsls	r3, r3, #16
 80030d4:	431a      	orrs	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	061b      	lsls	r3, r3, #24
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	071b      	lsls	r3, r3, #28
 80030e4:	4919      	ldr	r1, [pc, #100]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030ec:	4b17      	ldr	r3, [pc, #92]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80030f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f8:	f7fd ffc0 	bl	800107c <HAL_GetTick>
 80030fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003100:	f7fd ffbc 	bl	800107c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0d7      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b01      	cmp	r3, #1
 8003122:	f040 80cd 	bne.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a08      	ldr	r2, [pc, #32]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003132:	f7fd ffa3 	bl	800107c <HAL_GetTick>
 8003136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003138:	e00a      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800313a:	f7fd ff9f 	bl	800107c <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b64      	cmp	r3, #100	; 0x64
 8003146:	d903      	bls.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e0ba      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800314c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003150:	4b5e      	ldr	r3, [pc, #376]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315c:	d0ed      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800317a:	2b00      	cmp	r3, #0
 800317c:	d02e      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	2b00      	cmp	r3, #0
 8003184:	d12a      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003186:	4b51      	ldr	r3, [pc, #324]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	0c1b      	lsrs	r3, r3, #16
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003194:	4b4d      	ldr	r3, [pc, #308]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	0f1b      	lsrs	r3, r3, #28
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	019a      	lsls	r2, r3, #6
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	041b      	lsls	r3, r3, #16
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	061b      	lsls	r3, r3, #24
 80031b4:	431a      	orrs	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	071b      	lsls	r3, r3, #28
 80031ba:	4944      	ldr	r1, [pc, #272]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031c2:	4b42      	ldr	r3, [pc, #264]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	493d      	ldr	r1, [pc, #244]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d022      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f0:	d11d      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f8:	0e1b      	lsrs	r3, r3, #24
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003200:	4b32      	ldr	r3, [pc, #200]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	0f1b      	lsrs	r3, r3, #28
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	019a      	lsls	r2, r3, #6
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	431a      	orrs	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	071b      	lsls	r3, r3, #28
 8003226:	4929      	ldr	r1, [pc, #164]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d028      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	0e1b      	lsrs	r3, r3, #24
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003248:	4b20      	ldr	r3, [pc, #128]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	019a      	lsls	r2, r3, #6
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	431a      	orrs	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	071b      	lsls	r3, r3, #28
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4911      	ldr	r1, [pc, #68]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800328c:	4b0f      	ldr	r3, [pc, #60]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0e      	ldr	r2, [pc, #56]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003296:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003298:	f7fd fef0 	bl	800107c <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032a0:	f7fd feec 	bl	800107c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	; 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e007      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032be:	d1ef      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e01d      	b.n	800331e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f815 	bl	8003326 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 f986 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_TIM_Base_Start_IT+0x50>)
 800335c:	4013      	ands	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d00b      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x42>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d007      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	00010007 	.word	0x00010007

08003390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d122      	bne.n	80033ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d11b      	bne.n	80033ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0202 	mvn.w	r2, #2
 80033bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f905 	bl	80035e2 <HAL_TIM_IC_CaptureCallback>
 80033d8:	e005      	b.n	80033e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f8f7 	bl	80035ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f908 	bl	80035f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d122      	bne.n	8003440 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b04      	cmp	r3, #4
 8003406:	d11b      	bne.n	8003440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0204 	mvn.w	r2, #4
 8003410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8db 	bl	80035e2 <HAL_TIM_IC_CaptureCallback>
 800342c:	e005      	b.n	800343a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8cd 	bl	80035ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8de 	bl	80035f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b08      	cmp	r3, #8
 800344c:	d122      	bne.n	8003494 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b08      	cmp	r3, #8
 800345a:	d11b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0208 	mvn.w	r2, #8
 8003464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2204      	movs	r2, #4
 800346a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8b1 	bl	80035e2 <HAL_TIM_IC_CaptureCallback>
 8003480:	e005      	b.n	800348e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8a3 	bl	80035ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f8b4 	bl	80035f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d122      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d11b      	bne.n	80034e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0210 	mvn.w	r2, #16
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2208      	movs	r2, #8
 80034be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f887 	bl	80035e2 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f879 	bl	80035ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f88a 	bl	80035f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10e      	bne.n	8003514 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0201 	mvn.w	r2, #1
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd fb1e 	bl	8000b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	d10e      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352c:	2b80      	cmp	r3, #128	; 0x80
 800352e:	d107      	bne.n	8003540 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f91a 	bl	8003774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	d10e      	bne.n	800356e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355a:	2b80      	cmp	r3, #128	; 0x80
 800355c:	d107      	bne.n	800356e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f90d 	bl	8003788 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	d10e      	bne.n	800359a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d107      	bne.n	800359a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f838 	bl	800360a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d10e      	bne.n	80035c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d107      	bne.n	80035c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f06f 0220 	mvn.w	r2, #32
 80035be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f8cd 	bl	8003760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a40      	ldr	r2, [pc, #256]	; (8003734 <TIM_Base_SetConfig+0x114>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d013      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d00f      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a3d      	ldr	r2, [pc, #244]	; (8003738 <TIM_Base_SetConfig+0x118>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d00b      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a3c      	ldr	r2, [pc, #240]	; (800373c <TIM_Base_SetConfig+0x11c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d007      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a3b      	ldr	r2, [pc, #236]	; (8003740 <TIM_Base_SetConfig+0x120>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_Base_SetConfig+0x40>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a3a      	ldr	r2, [pc, #232]	; (8003744 <TIM_Base_SetConfig+0x124>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a2f      	ldr	r2, [pc, #188]	; (8003734 <TIM_Base_SetConfig+0x114>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d02b      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003680:	d027      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <TIM_Base_SetConfig+0x118>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d023      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2b      	ldr	r2, [pc, #172]	; (800373c <TIM_Base_SetConfig+0x11c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01f      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <TIM_Base_SetConfig+0x120>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d01b      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a29      	ldr	r2, [pc, #164]	; (8003744 <TIM_Base_SetConfig+0x124>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d017      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a28      	ldr	r2, [pc, #160]	; (8003748 <TIM_Base_SetConfig+0x128>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a27      	ldr	r2, [pc, #156]	; (800374c <TIM_Base_SetConfig+0x12c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00f      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a26      	ldr	r2, [pc, #152]	; (8003750 <TIM_Base_SetConfig+0x130>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00b      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a25      	ldr	r2, [pc, #148]	; (8003754 <TIM_Base_SetConfig+0x134>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a24      	ldr	r2, [pc, #144]	; (8003758 <TIM_Base_SetConfig+0x138>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a23      	ldr	r2, [pc, #140]	; (800375c <TIM_Base_SetConfig+0x13c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d108      	bne.n	80036e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <TIM_Base_SetConfig+0x114>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d003      	beq.n	8003718 <TIM_Base_SetConfig+0xf8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a0c      	ldr	r2, [pc, #48]	; (8003744 <TIM_Base_SetConfig+0x124>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d103      	bne.n	8003720 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	615a      	str	r2, [r3, #20]
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40010000 	.word	0x40010000
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40010400 	.word	0x40010400
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800
 8003754:	40001800 	.word	0x40001800
 8003758:	40001c00 	.word	0x40001c00
 800375c:	40002000 	.word	0x40002000

08003760 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e040      	b.n	8003830 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fd fac0 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f82c 	bl	8003838 <UART_SetConfig>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e022      	b.n	8003830 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fac4 	bl	8003d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003816:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fb4b 	bl	8003ec4 <UART_CheckIdleState>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4bb1      	ldr	r3, [pc, #708]	; (8003b2c <UART_SetConfig+0x2f4>)
 8003868:	4013      	ands	r3, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	6939      	ldr	r1, [r7, #16]
 8003870:	430b      	orrs	r3, r1
 8003872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a9f      	ldr	r2, [pc, #636]	; (8003b30 <UART_SetConfig+0x2f8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d121      	bne.n	80038fc <UART_SetConfig+0xc4>
 80038b8:	4b9e      	ldr	r3, [pc, #632]	; (8003b34 <UART_SetConfig+0x2fc>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d816      	bhi.n	80038f4 <UART_SetConfig+0xbc>
 80038c6:	a201      	add	r2, pc, #4	; (adr r2, 80038cc <UART_SetConfig+0x94>)
 80038c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038cc:	080038dd 	.word	0x080038dd
 80038d0:	080038e9 	.word	0x080038e9
 80038d4:	080038e3 	.word	0x080038e3
 80038d8:	080038ef 	.word	0x080038ef
 80038dc:	2301      	movs	r3, #1
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e151      	b.n	8003b86 <UART_SetConfig+0x34e>
 80038e2:	2302      	movs	r3, #2
 80038e4:	77fb      	strb	r3, [r7, #31]
 80038e6:	e14e      	b.n	8003b86 <UART_SetConfig+0x34e>
 80038e8:	2304      	movs	r3, #4
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e14b      	b.n	8003b86 <UART_SetConfig+0x34e>
 80038ee:	2308      	movs	r3, #8
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e148      	b.n	8003b86 <UART_SetConfig+0x34e>
 80038f4:	2310      	movs	r3, #16
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	bf00      	nop
 80038fa:	e144      	b.n	8003b86 <UART_SetConfig+0x34e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a8d      	ldr	r2, [pc, #564]	; (8003b38 <UART_SetConfig+0x300>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d134      	bne.n	8003970 <UART_SetConfig+0x138>
 8003906:	4b8b      	ldr	r3, [pc, #556]	; (8003b34 <UART_SetConfig+0x2fc>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f003 030c 	and.w	r3, r3, #12
 8003910:	2b0c      	cmp	r3, #12
 8003912:	d829      	bhi.n	8003968 <UART_SetConfig+0x130>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <UART_SetConfig+0xe4>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	08003951 	.word	0x08003951
 8003920:	08003969 	.word	0x08003969
 8003924:	08003969 	.word	0x08003969
 8003928:	08003969 	.word	0x08003969
 800392c:	0800395d 	.word	0x0800395d
 8003930:	08003969 	.word	0x08003969
 8003934:	08003969 	.word	0x08003969
 8003938:	08003969 	.word	0x08003969
 800393c:	08003957 	.word	0x08003957
 8003940:	08003969 	.word	0x08003969
 8003944:	08003969 	.word	0x08003969
 8003948:	08003969 	.word	0x08003969
 800394c:	08003963 	.word	0x08003963
 8003950:	2300      	movs	r3, #0
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e117      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003956:	2302      	movs	r3, #2
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e114      	b.n	8003b86 <UART_SetConfig+0x34e>
 800395c:	2304      	movs	r3, #4
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e111      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003962:	2308      	movs	r3, #8
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e10e      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003968:	2310      	movs	r3, #16
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	bf00      	nop
 800396e:	e10a      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a71      	ldr	r2, [pc, #452]	; (8003b3c <UART_SetConfig+0x304>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d120      	bne.n	80039bc <UART_SetConfig+0x184>
 800397a:	4b6e      	ldr	r3, [pc, #440]	; (8003b34 <UART_SetConfig+0x2fc>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003984:	2b10      	cmp	r3, #16
 8003986:	d00f      	beq.n	80039a8 <UART_SetConfig+0x170>
 8003988:	2b10      	cmp	r3, #16
 800398a:	d802      	bhi.n	8003992 <UART_SetConfig+0x15a>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d005      	beq.n	800399c <UART_SetConfig+0x164>
 8003990:	e010      	b.n	80039b4 <UART_SetConfig+0x17c>
 8003992:	2b20      	cmp	r3, #32
 8003994:	d005      	beq.n	80039a2 <UART_SetConfig+0x16a>
 8003996:	2b30      	cmp	r3, #48	; 0x30
 8003998:	d009      	beq.n	80039ae <UART_SetConfig+0x176>
 800399a:	e00b      	b.n	80039b4 <UART_SetConfig+0x17c>
 800399c:	2300      	movs	r3, #0
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e0f1      	b.n	8003b86 <UART_SetConfig+0x34e>
 80039a2:	2302      	movs	r3, #2
 80039a4:	77fb      	strb	r3, [r7, #31]
 80039a6:	e0ee      	b.n	8003b86 <UART_SetConfig+0x34e>
 80039a8:	2304      	movs	r3, #4
 80039aa:	77fb      	strb	r3, [r7, #31]
 80039ac:	e0eb      	b.n	8003b86 <UART_SetConfig+0x34e>
 80039ae:	2308      	movs	r3, #8
 80039b0:	77fb      	strb	r3, [r7, #31]
 80039b2:	e0e8      	b.n	8003b86 <UART_SetConfig+0x34e>
 80039b4:	2310      	movs	r3, #16
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	bf00      	nop
 80039ba:	e0e4      	b.n	8003b86 <UART_SetConfig+0x34e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a5f      	ldr	r2, [pc, #380]	; (8003b40 <UART_SetConfig+0x308>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d120      	bne.n	8003a08 <UART_SetConfig+0x1d0>
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <UART_SetConfig+0x2fc>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d00f      	beq.n	80039f4 <UART_SetConfig+0x1bc>
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d802      	bhi.n	80039de <UART_SetConfig+0x1a6>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <UART_SetConfig+0x1b0>
 80039dc:	e010      	b.n	8003a00 <UART_SetConfig+0x1c8>
 80039de:	2b80      	cmp	r3, #128	; 0x80
 80039e0:	d005      	beq.n	80039ee <UART_SetConfig+0x1b6>
 80039e2:	2bc0      	cmp	r3, #192	; 0xc0
 80039e4:	d009      	beq.n	80039fa <UART_SetConfig+0x1c2>
 80039e6:	e00b      	b.n	8003a00 <UART_SetConfig+0x1c8>
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e0cb      	b.n	8003b86 <UART_SetConfig+0x34e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e0c8      	b.n	8003b86 <UART_SetConfig+0x34e>
 80039f4:	2304      	movs	r3, #4
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e0c5      	b.n	8003b86 <UART_SetConfig+0x34e>
 80039fa:	2308      	movs	r3, #8
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e0c2      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a00:	2310      	movs	r3, #16
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	bf00      	nop
 8003a06:	e0be      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a4d      	ldr	r2, [pc, #308]	; (8003b44 <UART_SetConfig+0x30c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d124      	bne.n	8003a5c <UART_SetConfig+0x224>
 8003a12:	4b48      	ldr	r3, [pc, #288]	; (8003b34 <UART_SetConfig+0x2fc>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a20:	d012      	beq.n	8003a48 <UART_SetConfig+0x210>
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a26:	d802      	bhi.n	8003a2e <UART_SetConfig+0x1f6>
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d007      	beq.n	8003a3c <UART_SetConfig+0x204>
 8003a2c:	e012      	b.n	8003a54 <UART_SetConfig+0x21c>
 8003a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a32:	d006      	beq.n	8003a42 <UART_SetConfig+0x20a>
 8003a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a38:	d009      	beq.n	8003a4e <UART_SetConfig+0x216>
 8003a3a:	e00b      	b.n	8003a54 <UART_SetConfig+0x21c>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e0a1      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a42:	2302      	movs	r3, #2
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e09e      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a48:	2304      	movs	r3, #4
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e09b      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a4e:	2308      	movs	r3, #8
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e098      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a54:	2310      	movs	r3, #16
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	bf00      	nop
 8003a5a:	e094      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a39      	ldr	r2, [pc, #228]	; (8003b48 <UART_SetConfig+0x310>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d124      	bne.n	8003ab0 <UART_SetConfig+0x278>
 8003a66:	4b33      	ldr	r3, [pc, #204]	; (8003b34 <UART_SetConfig+0x2fc>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a74:	d012      	beq.n	8003a9c <UART_SetConfig+0x264>
 8003a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7a:	d802      	bhi.n	8003a82 <UART_SetConfig+0x24a>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <UART_SetConfig+0x258>
 8003a80:	e012      	b.n	8003aa8 <UART_SetConfig+0x270>
 8003a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a86:	d006      	beq.n	8003a96 <UART_SetConfig+0x25e>
 8003a88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a8c:	d009      	beq.n	8003aa2 <UART_SetConfig+0x26a>
 8003a8e:	e00b      	b.n	8003aa8 <UART_SetConfig+0x270>
 8003a90:	2301      	movs	r3, #1
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e077      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e074      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e071      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e06e      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	bf00      	nop
 8003aae:	e06a      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a25      	ldr	r2, [pc, #148]	; (8003b4c <UART_SetConfig+0x314>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d124      	bne.n	8003b04 <UART_SetConfig+0x2cc>
 8003aba:	4b1e      	ldr	r3, [pc, #120]	; (8003b34 <UART_SetConfig+0x2fc>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac8:	d012      	beq.n	8003af0 <UART_SetConfig+0x2b8>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d802      	bhi.n	8003ad6 <UART_SetConfig+0x29e>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <UART_SetConfig+0x2ac>
 8003ad4:	e012      	b.n	8003afc <UART_SetConfig+0x2c4>
 8003ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ada:	d006      	beq.n	8003aea <UART_SetConfig+0x2b2>
 8003adc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ae0:	d009      	beq.n	8003af6 <UART_SetConfig+0x2be>
 8003ae2:	e00b      	b.n	8003afc <UART_SetConfig+0x2c4>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e04d      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e04a      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003af0:	2304      	movs	r3, #4
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e047      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003af6:	2308      	movs	r3, #8
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e044      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003afc:	2310      	movs	r3, #16
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	bf00      	nop
 8003b02:	e040      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <UART_SetConfig+0x318>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d139      	bne.n	8003b82 <UART_SetConfig+0x34a>
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <UART_SetConfig+0x2fc>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b1c:	d027      	beq.n	8003b6e <UART_SetConfig+0x336>
 8003b1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b22:	d817      	bhi.n	8003b54 <UART_SetConfig+0x31c>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01c      	beq.n	8003b62 <UART_SetConfig+0x32a>
 8003b28:	e027      	b.n	8003b7a <UART_SetConfig+0x342>
 8003b2a:	bf00      	nop
 8003b2c:	efff69f3 	.word	0xefff69f3
 8003b30:	40011000 	.word	0x40011000
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40004400 	.word	0x40004400
 8003b3c:	40004800 	.word	0x40004800
 8003b40:	40004c00 	.word	0x40004c00
 8003b44:	40005000 	.word	0x40005000
 8003b48:	40011400 	.word	0x40011400
 8003b4c:	40007800 	.word	0x40007800
 8003b50:	40007c00 	.word	0x40007c00
 8003b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b58:	d006      	beq.n	8003b68 <UART_SetConfig+0x330>
 8003b5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b5e:	d009      	beq.n	8003b74 <UART_SetConfig+0x33c>
 8003b60:	e00b      	b.n	8003b7a <UART_SetConfig+0x342>
 8003b62:	2300      	movs	r3, #0
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e00e      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e00b      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003b6e:	2304      	movs	r3, #4
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e008      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003b74:	2308      	movs	r3, #8
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	e005      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003b7a:	2310      	movs	r3, #16
 8003b7c:	77fb      	strb	r3, [r7, #31]
 8003b7e:	bf00      	nop
 8003b80:	e001      	b.n	8003b86 <UART_SetConfig+0x34e>
 8003b82:	2310      	movs	r3, #16
 8003b84:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8e:	d17c      	bne.n	8003c8a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003b90:	7ffb      	ldrb	r3, [r7, #31]
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d859      	bhi.n	8003c4a <UART_SetConfig+0x412>
 8003b96:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <UART_SetConfig+0x364>)
 8003b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003bdf 	.word	0x08003bdf
 8003ba4:	08003bfd 	.word	0x08003bfd
 8003ba8:	08003c4b 	.word	0x08003c4b
 8003bac:	08003c15 	.word	0x08003c15
 8003bb0:	08003c4b 	.word	0x08003c4b
 8003bb4:	08003c4b 	.word	0x08003c4b
 8003bb8:	08003c4b 	.word	0x08003c4b
 8003bbc:	08003c33 	.word	0x08003c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003bc0:	f7fe ff3e 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	005a      	lsls	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	61bb      	str	r3, [r7, #24]
        break;
 8003bdc:	e038      	b.n	8003c50 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003bde:	f7fe ff43 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 8003be2:	4603      	mov	r3, r0
 8003be4:	005a      	lsls	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	441a      	add	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	61bb      	str	r3, [r7, #24]
        break;
 8003bfa:	e029      	b.n	8003c50 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	085a      	lsrs	r2, r3, #1
 8003c02:	4b5d      	ldr	r3, [pc, #372]	; (8003d78 <UART_SetConfig+0x540>)
 8003c04:	4413      	add	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6852      	ldr	r2, [r2, #4]
 8003c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	61bb      	str	r3, [r7, #24]
        break;
 8003c12:	e01d      	b.n	8003c50 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c14:	f7fe fe30 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	005a      	lsls	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	61bb      	str	r3, [r7, #24]
        break;
 8003c30:	e00e      	b.n	8003c50 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	085b      	lsrs	r3, r3, #1
 8003c38:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	61bb      	str	r3, [r7, #24]
        break;
 8003c48:	e002      	b.n	8003c50 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
        break;
 8003c4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b0f      	cmp	r3, #15
 8003c54:	d916      	bls.n	8003c84 <UART_SetConfig+0x44c>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d212      	bcs.n	8003c84 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f023 030f 	bic.w	r3, r3, #15
 8003c66:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	89fb      	ldrh	r3, [r7, #14]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	89fa      	ldrh	r2, [r7, #14]
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	e06e      	b.n	8003d62 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
 8003c88:	e06b      	b.n	8003d62 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003c8a:	7ffb      	ldrb	r3, [r7, #31]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d857      	bhi.n	8003d40 <UART_SetConfig+0x508>
 8003c90:	a201      	add	r2, pc, #4	; (adr r2, 8003c98 <UART_SetConfig+0x460>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003cbd 	.word	0x08003cbd
 8003c9c:	08003cd9 	.word	0x08003cd9
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003d41 	.word	0x08003d41
 8003ca8:	08003d0d 	.word	0x08003d0d
 8003cac:	08003d41 	.word	0x08003d41
 8003cb0:	08003d41 	.word	0x08003d41
 8003cb4:	08003d41 	.word	0x08003d41
 8003cb8:	08003d29 	.word	0x08003d29
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cbc:	f7fe fec0 	bl	8002a40 <HAL_RCC_GetPCLK1Freq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	441a      	add	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	61bb      	str	r3, [r7, #24]
        break;
 8003cd6:	e036      	b.n	8003d46 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003cd8:	f7fe fec6 	bl	8002a68 <HAL_RCC_GetPCLK2Freq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	441a      	add	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	61bb      	str	r3, [r7, #24]
        break;
 8003cf2:	e028      	b.n	8003d46 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	085a      	lsrs	r2, r3, #1
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <UART_SetConfig+0x544>)
 8003cfc:	4413      	add	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	61bb      	str	r3, [r7, #24]
        break;
 8003d0a:	e01c      	b.n	8003d46 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d0c:	f7fe fdb4 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	61bb      	str	r3, [r7, #24]
        break;
 8003d26:	e00e      	b.n	8003d46 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	61bb      	str	r3, [r7, #24]
        break;
 8003d3e:	e002      	b.n	8003d46 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
        break;
 8003d44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b0f      	cmp	r3, #15
 8003d4a:	d908      	bls.n	8003d5e <UART_SetConfig+0x526>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d52:	d204      	bcs.n	8003d5e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e001      	b.n	8003d62 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	01e84800 	.word	0x01e84800
 8003d7c:	00f42400 	.word	0x00f42400

08003d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01a      	beq.n	8003e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d10a      	bne.n	8003e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ed2:	f7fd f8d3 	bl	800107c <HAL_GetTick>
 8003ed6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d10e      	bne.n	8003f04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f814 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e00a      	b.n	8003f1a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f32:	e02a      	b.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d026      	beq.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3c:	f7fd f89e 	bl	800107c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d302      	bcc.n	8003f52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11b      	bne.n	8003f8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f60:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2220      	movs	r2, #32
 8003f76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e00f      	b.n	8003faa <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69da      	ldr	r2, [r3, #28]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d0c5      	beq.n	8003f34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	f107 001c 	add.w	r0, r7, #28
 8003fc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d120      	bne.n	800400e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4b20      	ldr	r3, [pc, #128]	; (8004060 <USB_CoreInit+0xac>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa60 	bl	80044c8 <USB_CoreReset>
 8004008:	4603      	mov	r3, r0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e010      	b.n	8004030 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fa54 	bl	80044c8 <USB_CoreReset>
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10b      	bne.n	800404e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f043 0206 	orr.w	r2, r3, #6
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f043 0220 	orr.w	r2, r3, #32
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800405a:	b004      	add	sp, #16
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	ffbdffbf 	.word	0xffbdffbf

08004064 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f023 0201 	bic.w	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
 80040b0:	e00b      	b.n	80040ca <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	e001      	b.n	80040ca <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e003      	b.n	80040d2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80040ca:	2032      	movs	r0, #50	; 0x32
 80040cc:	f7fc ffe2 	bl	8001094 <HAL_Delay>

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040dc:	b084      	sub	sp, #16
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e009      	b.n	8004110 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3340      	adds	r3, #64	; 0x40
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	2200      	movs	r2, #0
 8004108:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3301      	adds	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b0e      	cmp	r3, #14
 8004114:	d9f2      	bls.n	80040fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d112      	bne.n	8004142 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	e005      	b.n	800414e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004154:	461a      	mov	r2, r3
 8004156:	2300      	movs	r3, #0
 8004158:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004160:	4619      	mov	r1, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004168:	461a      	mov	r2, r3
 800416a:	680b      	ldr	r3, [r1, #0]
 800416c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10c      	bne.n	800418e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d104      	bne.n	8004184 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800417a:	2100      	movs	r1, #0
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f971 	bl	8004464 <USB_SetDevSpeed>
 8004182:	e018      	b.n	80041b6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004184:	2101      	movs	r1, #1
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f96c 	bl	8004464 <USB_SetDevSpeed>
 800418c:	e013      	b.n	80041b6 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2b03      	cmp	r3, #3
 8004192:	d10c      	bne.n	80041ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800419a:	2100      	movs	r1, #0
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f961 	bl	8004464 <USB_SetDevSpeed>
 80041a2:	e008      	b.n	80041b6 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041a4:	2101      	movs	r1, #1
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f95c 	bl	8004464 <USB_SetDevSpeed>
 80041ac:	e003      	b.n	80041b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041ae:	2103      	movs	r1, #3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f957 	bl	8004464 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041b6:	2110      	movs	r1, #16
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f90b 	bl	80043d4 <USB_FlushTxFifo>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f929 	bl	8004420 <USB_FlushRxFifo>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041de:	461a      	mov	r2, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f6:	461a      	mov	r2, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e043      	b.n	800428a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	015a      	lsls	r2, r3, #5
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004218:	d118      	bne.n	800424c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800422c:	461a      	mov	r2, r3
 800422e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	e013      	b.n	800425e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	461a      	mov	r2, r3
 8004244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e008      	b.n	800425e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	461a      	mov	r2, r3
 800427e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3301      	adds	r3, #1
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	429a      	cmp	r2, r3
 8004290:	d3b7      	bcc.n	8004202 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	e043      	b.n	8004320 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ae:	d118      	bne.n	80042e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c2:	461a      	mov	r2, r3
 80042c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e013      	b.n	80042f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d8:	461a      	mov	r2, r3
 80042da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	e008      	b.n	80042f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	2300      	movs	r3, #0
 8004304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3301      	adds	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	429a      	cmp	r2, r3
 8004326:	d3b7      	bcc.n	8004298 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	2b01      	cmp	r3, #1
 8004340:	d110      	bne.n	8004364 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	461a      	mov	r2, r3
 800434a:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <USB_DevInit+0x2e8>)
 800434c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435c:	4619      	mov	r1, r3
 800435e:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <USB_DevInit+0x2ec>)
 8004360:	4313      	orrs	r3, r2
 8004362:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004370:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004374:	2b00      	cmp	r3, #0
 8004376:	d105      	bne.n	8004384 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f043 0210 	orr.w	r2, r3, #16
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699a      	ldr	r2, [r3, #24]
 8004388:	4b10      	ldr	r3, [pc, #64]	; (80043cc <USB_DevInit+0x2f0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d005      	beq.n	80043a2 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f043 0208 	orr.w	r2, r3, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699a      	ldr	r2, [r3, #24]
 80043ac:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <USB_DevInit+0x2f4>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c0:	b004      	add	sp, #16
 80043c2:	4770      	bx	lr
 80043c4:	00800100 	.word	0x00800100
 80043c8:	00010003 	.word	0x00010003
 80043cc:	803c3800 	.word	0x803c3800
 80043d0:	40000004 	.word	0x40000004

080043d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	f043 0220 	orr.w	r2, r3, #32
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <USB_FlushTxFifo+0x48>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e006      	b.n	800440e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b20      	cmp	r3, #32
 800440a:	d0f0      	beq.n	80043ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	00030d40 	.word	0x00030d40

08004420 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2210      	movs	r2, #16
 8004430:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a09      	ldr	r2, [pc, #36]	; (8004460 <USB_FlushRxFifo+0x40>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e006      	b.n	8004452 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b10      	cmp	r3, #16
 800444e:	d0f0      	beq.n	8004432 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	00030d40 	.word	0x00030d40

08004464 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044b0:	f043 0302 	orr.w	r3, r3, #2
 80044b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80044b6:	2003      	movs	r0, #3
 80044b8:	f7fc fdec 	bl	8001094 <HAL_Delay>

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <USB_CoreReset+0x64>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e01b      	b.n	800451e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	daf2      	bge.n	80044d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3301      	adds	r3, #1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <USB_CoreReset+0x64>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e006      	b.n	800451e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b01      	cmp	r3, #1
 800451a:	d0f0      	beq.n	80044fe <USB_CoreReset+0x36>

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	00030d40 	.word	0x00030d40

08004530 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004536:	f3ef 8305 	mrs	r3, IPSR
 800453a:	60bb      	str	r3, [r7, #8]
  return(result);
 800453c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004542:	f3ef 8310 	mrs	r3, PRIMASK
 8004546:	607b      	str	r3, [r7, #4]
  return(result);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <osKernelInitialize+0x32>
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <osKernelInitialize+0x64>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d109      	bne.n	800456a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004556:	f3ef 8311 	mrs	r3, BASEPRI
 800455a:	603b      	str	r3, [r7, #0]
  return(result);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004562:	f06f 0305 	mvn.w	r3, #5
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e00c      	b.n	8004584 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <osKernelInitialize+0x64>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d105      	bne.n	800457e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004572:	4b08      	ldr	r3, [pc, #32]	; (8004594 <osKernelInitialize+0x64>)
 8004574:	2201      	movs	r2, #1
 8004576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e002      	b.n	8004584 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004584:	68fb      	ldr	r3, [r7, #12]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	2000002c 	.word	0x2000002c

08004598 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800459e:	f3ef 8305 	mrs	r3, IPSR
 80045a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80045a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045aa:	f3ef 8310 	mrs	r3, PRIMASK
 80045ae:	607b      	str	r3, [r7, #4]
  return(result);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <osKernelStart+0x32>
 80045b6:	4b11      	ldr	r3, [pc, #68]	; (80045fc <osKernelStart+0x64>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d109      	bne.n	80045d2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045be:	f3ef 8311 	mrs	r3, BASEPRI
 80045c2:	603b      	str	r3, [r7, #0]
  return(result);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80045ca:	f06f 0305 	mvn.w	r3, #5
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e00e      	b.n	80045f0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <osKernelStart+0x64>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <osKernelStart+0x64>)
 80045dc:	2202      	movs	r2, #2
 80045de:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80045e0:	f001 ff66 	bl	80064b0 <vTaskStartScheduler>
      stat = osOK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e002      	b.n	80045f0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80045ea:	f04f 33ff 	mov.w	r3, #4294967295
 80045ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045f0:	68fb      	ldr	r3, [r7, #12]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	2000002c 	.word	0x2000002c

08004600 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b092      	sub	sp, #72	; 0x48
 8004604:	af04      	add	r7, sp, #16
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004610:	f3ef 8305 	mrs	r3, IPSR
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004618:	2b00      	cmp	r3, #0
 800461a:	f040 8094 	bne.w	8004746 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800461e:	f3ef 8310 	mrs	r3, PRIMASK
 8004622:	623b      	str	r3, [r7, #32]
  return(result);
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 808d 	bne.w	8004746 <osThreadNew+0x146>
 800462c:	4b48      	ldr	r3, [pc, #288]	; (8004750 <osThreadNew+0x150>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d106      	bne.n	8004642 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004634:	f3ef 8311 	mrs	r3, BASEPRI
 8004638:	61fb      	str	r3, [r7, #28]
  return(result);
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	2b00      	cmp	r3, #0
 800463e:	f040 8082 	bne.w	8004746 <osThreadNew+0x146>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d07e      	beq.n	8004746 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004648:	2380      	movs	r3, #128	; 0x80
 800464a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800464c:	2318      	movs	r3, #24
 800464e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004650:	2300      	movs	r3, #0
 8004652:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004654:	f107 031b 	add.w	r3, r7, #27
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d045      	beq.n	80046f2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <osThreadNew+0x74>
        name = attr->name;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <osThreadNew+0x9a>
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	2b38      	cmp	r3, #56	; 0x38
 800468c:	d805      	bhi.n	800469a <osThreadNew+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <osThreadNew+0x9e>
        return (NULL);
 800469a:	2300      	movs	r3, #0
 800469c:	e054      	b.n	8004748 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00e      	beq.n	80046d4 <osThreadNew+0xd4>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b5b      	cmp	r3, #91	; 0x5b
 80046bc:	d90a      	bls.n	80046d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d006      	beq.n	80046d4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <osThreadNew+0xd4>
        mem = 1;
 80046ce:	2301      	movs	r3, #1
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d2:	e010      	b.n	80046f6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10c      	bne.n	80046f6 <osThreadNew+0xf6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d108      	bne.n	80046f6 <osThreadNew+0xf6>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d104      	bne.n	80046f6 <osThreadNew+0xf6>
          mem = 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80046f0:	e001      	b.n	80046f6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d110      	bne.n	800471e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004704:	9202      	str	r2, [sp, #8]
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f001 fc04 	bl	8005f20 <xTaskCreateStatic>
 8004718:	4603      	mov	r3, r0
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e013      	b.n	8004746 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2b00      	cmp	r3, #0
 8004722:	d110      	bne.n	8004746 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	b29a      	uxth	r2, r3
 8004728:	f107 0314 	add.w	r3, r7, #20
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f001 fc51 	bl	8005fde <xTaskCreate>
 800473c:	4603      	mov	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d001      	beq.n	8004746 <osThreadNew+0x146>
          hTask = NULL;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004746:	697b      	ldr	r3, [r7, #20]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3738      	adds	r7, #56	; 0x38
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	2000002c 	.word	0x2000002c

08004754 <osThreadGetState>:
  }

  return (id);
}

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004760:	f3ef 8305 	mrs	r3, IPSR
 8004764:	617b      	str	r3, [r7, #20]
  return(result);
 8004766:	697b      	ldr	r3, [r7, #20]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8004768:	2b00      	cmp	r3, #0
 800476a:	d112      	bne.n	8004792 <osThreadGetState+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476c:	f3ef 8310 	mrs	r3, PRIMASK
 8004770:	613b      	str	r3, [r7, #16]
  return(result);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10c      	bne.n	8004792 <osThreadGetState+0x3e>
 8004778:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <osThreadGetState+0x98>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d105      	bne.n	800478c <osThreadGetState+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004780:	f3ef 8311 	mrs	r3, BASEPRI
 8004784:	60fb      	str	r3, [r7, #12]
  return(result);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <osThreadGetState+0x3e>
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d103      	bne.n	800479a <osThreadGetState+0x46>
    state = osThreadError;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	61fb      	str	r3, [r7, #28]
 8004798:	e022      	b.n	80047e0 <osThreadGetState+0x8c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 800479a:	69b8      	ldr	r0, [r7, #24]
 800479c:	f001 fd92 	bl	80062c4 <eTaskGetState>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d818      	bhi.n	80047d8 <osThreadGetState+0x84>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <osThreadGetState+0x58>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047c1 	.word	0x080047c1
 80047b0:	080047c7 	.word	0x080047c7
 80047b4:	080047cd 	.word	0x080047cd
 80047b8:	080047cd 	.word	0x080047cd
 80047bc:	080047d3 	.word	0x080047d3
      case eRunning:   state = osThreadRunning;    break;
 80047c0:	2302      	movs	r3, #2
 80047c2:	61fb      	str	r3, [r7, #28]
 80047c4:	e00c      	b.n	80047e0 <osThreadGetState+0x8c>
      case eReady:     state = osThreadReady;      break;
 80047c6:	2301      	movs	r3, #1
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	e009      	b.n	80047e0 <osThreadGetState+0x8c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 80047cc:	2303      	movs	r3, #3
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e006      	b.n	80047e0 <osThreadGetState+0x8c>
      case eDeleted:   state = osThreadTerminated; break;
 80047d2:	2304      	movs	r3, #4
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e003      	b.n	80047e0 <osThreadGetState+0x8c>
      case eInvalid:
      default:         state = osThreadError;      break;
 80047d8:	f04f 33ff 	mov.w	r3, #4294967295
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	bf00      	nop
    }
  }

  return (state);
 80047e0:	69fb      	ldr	r3, [r7, #28]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3720      	adds	r7, #32
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	2000002c 	.word	0x2000002c

080047f0 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047fc:	f3ef 8305 	mrs	r3, IPSR
 8004800:	617b      	str	r3, [r7, #20]
  return(result);
 8004802:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10f      	bne.n	8004828 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004808:	f3ef 8310 	mrs	r3, PRIMASK
 800480c:	613b      	str	r3, [r7, #16]
  return(result);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d109      	bne.n	8004828 <osThreadResume+0x38>
 8004814:	4b0f      	ldr	r3, [pc, #60]	; (8004854 <osThreadResume+0x64>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d109      	bne.n	8004830 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800481c:	f3ef 8311 	mrs	r3, BASEPRI
 8004820:	60fb      	str	r3, [r7, #12]
  return(result);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <osThreadResume+0x40>
    stat = osErrorISR;
 8004828:	f06f 0305 	mvn.w	r3, #5
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	e00b      	b.n	8004848 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d103      	bne.n	800483e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8004836:	f06f 0303 	mvn.w	r3, #3
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e004      	b.n	8004848 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8004842:	69b8      	ldr	r0, [r7, #24]
 8004844:	f001 fdd4 	bl	80063f0 <vTaskResume>
  }

  return (stat);
 8004848:	69fb      	ldr	r3, [r7, #28]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	2000002c 	.word	0x2000002c

08004858 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004860:	f3ef 8305 	mrs	r3, IPSR
 8004864:	613b      	str	r3, [r7, #16]
  return(result);
 8004866:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10f      	bne.n	800488c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486c:	f3ef 8310 	mrs	r3, PRIMASK
 8004870:	60fb      	str	r3, [r7, #12]
  return(result);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <osDelay+0x34>
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <osDelay+0x58>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d109      	bne.n	8004894 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004880:	f3ef 8311 	mrs	r3, BASEPRI
 8004884:	60bb      	str	r3, [r7, #8]
  return(result);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <osDelay+0x3c>
    stat = osErrorISR;
 800488c:	f06f 0305 	mvn.w	r3, #5
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	e007      	b.n	80048a4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f001 fcda 	bl	8006258 <vTaskDelay>
    }
  }

  return (stat);
 80048a4:	697b      	ldr	r3, [r7, #20]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	2000002c 	.word	0x2000002c

080048b4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c0:	f3ef 8305 	mrs	r3, IPSR
 80048c4:	613b      	str	r3, [r7, #16]
  return(result);
 80048c6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f040 8085 	bne.w	80049d8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ce:	f3ef 8310 	mrs	r3, PRIMASK
 80048d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d17e      	bne.n	80049d8 <osMutexNew+0x124>
 80048da:	4b42      	ldr	r3, [pc, #264]	; (80049e4 <osMutexNew+0x130>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d105      	bne.n	80048ee <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048e2:	f3ef 8311 	mrs	r3, BASEPRI
 80048e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d174      	bne.n	80049d8 <osMutexNew+0x124>
    if (attr != NULL) {
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <osMutexNew+0x48>
      type = attr->attr_bits;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	623b      	str	r3, [r7, #32]
 80048fa:	e001      	b.n	8004900 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <osMutexNew+0x5c>
      rmtx = 1U;
 800490a:	2301      	movs	r3, #1
 800490c:	61fb      	str	r3, [r7, #28]
 800490e:	e001      	b.n	8004914 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d15c      	bne.n	80049d8 <osMutexNew+0x124>
      mem = -1;
 800491e:	f04f 33ff 	mov.w	r3, #4294967295
 8004922:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <osMutexNew+0x8c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b4f      	cmp	r3, #79	; 0x4f
 8004938:	d902      	bls.n	8004940 <osMutexNew+0x8c>
          mem = 1;
 800493a:	2301      	movs	r3, #1
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e00c      	b.n	800495a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <osMutexNew+0xa6>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <osMutexNew+0xa6>
            mem = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	e001      	b.n	800495a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004956:	2300      	movs	r3, #0
 8004958:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d112      	bne.n	8004986 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4619      	mov	r1, r3
 800496c:	2004      	movs	r0, #4
 800496e:	f000 fcb7 	bl	80052e0 <xQueueCreateMutexStatic>
 8004972:	6278      	str	r0, [r7, #36]	; 0x24
 8004974:	e016      	b.n	80049a4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	4619      	mov	r1, r3
 800497c:	2001      	movs	r0, #1
 800497e:	f000 fcaf 	bl	80052e0 <xQueueCreateMutexStatic>
 8004982:	6278      	str	r0, [r7, #36]	; 0x24
 8004984:	e00e      	b.n	80049a4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d004      	beq.n	800499c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004992:	2004      	movs	r0, #4
 8004994:	f000 fc8c 	bl	80052b0 <xQueueCreateMutex>
 8004998:	6278      	str	r0, [r7, #36]	; 0x24
 800499a:	e003      	b.n	80049a4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800499c:	2001      	movs	r0, #1
 800499e:	f000 fc87 	bl	80052b0 <xQueueCreateMutex>
 80049a2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <osMutexNew+0x110>
        if (attr != NULL) {
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <osMutexNew+0x104>
          name = attr->name;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e001      	b.n	80049bc <osMutexNew+0x108>
        } else {
          name = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049c0:	f001 fa52 	bl	8005e68 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d006      	beq.n	80049d8 <osMutexNew+0x124>
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3728      	adds	r7, #40	; 0x28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	2000002c 	.word	0x2000002c

080049e8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f023 0301 	bic.w	r3, r3, #1
 80049f8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a06:	f3ef 8305 	mrs	r3, IPSR
 8004a0a:	613b      	str	r3, [r7, #16]
  return(result);
 8004a0c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a12:	f3ef 8310 	mrs	r3, PRIMASK
 8004a16:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <osMutexAcquire+0x4a>
 8004a1e:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <osMutexAcquire+0xb8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d109      	bne.n	8004a3a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a26:	f3ef 8311 	mrs	r3, BASEPRI
 8004a2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004a32:	f06f 0305 	mvn.w	r3, #5
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e02c      	b.n	8004a94 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d103      	bne.n	8004a48 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004a40:	f06f 0303 	mvn.w	r3, #3
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	e025      	b.n	8004a94 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d011      	beq.n	8004a72 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	69b8      	ldr	r0, [r7, #24]
 8004a52:	f000 fc95 	bl	8005380 <xQueueTakeMutexRecursive>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d01b      	beq.n	8004a94 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004a62:	f06f 0301 	mvn.w	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
 8004a68:	e014      	b.n	8004a94 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004a6a:	f06f 0302 	mvn.w	r3, #2
 8004a6e:	61fb      	str	r3, [r7, #28]
 8004a70:	e010      	b.n	8004a94 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	69b8      	ldr	r0, [r7, #24]
 8004a76:	f000 ff3b 	bl	80058f0 <xQueueSemaphoreTake>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d009      	beq.n	8004a94 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004a86:	f06f 0301 	mvn.w	r3, #1
 8004a8a:	61fb      	str	r3, [r7, #28]
 8004a8c:	e002      	b.n	8004a94 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004a8e:	f06f 0302 	mvn.w	r3, #2
 8004a92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004a94:	69fb      	ldr	r3, [r7, #28]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2000002c 	.word	0x2000002c

08004aa4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac0:	f3ef 8305 	mrs	r3, IPSR
 8004ac4:	613b      	str	r3, [r7, #16]
  return(result);
 8004ac6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004acc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <osMutexRelease+0x48>
 8004ad8:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <osMutexRelease+0x9c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d109      	bne.n	8004af4 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ae0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004aec:	f06f 0305 	mvn.w	r3, #5
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e01f      	b.n	8004b34 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004afa:	f06f 0303 	mvn.w	r3, #3
 8004afe:	61fb      	str	r3, [r7, #28]
 8004b00:	e018      	b.n	8004b34 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004b08:	69b8      	ldr	r0, [r7, #24]
 8004b0a:	f000 fc04 	bl	8005316 <xQueueGiveMutexRecursive>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d00f      	beq.n	8004b34 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004b14:	f06f 0302 	mvn.w	r3, #2
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	e00b      	b.n	8004b34 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2100      	movs	r1, #0
 8004b22:	69b8      	ldr	r0, [r7, #24]
 8004b24:	f000 fc64 	bl	80053f0 <xQueueGenericSend>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d002      	beq.n	8004b34 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004b2e:	f06f 0302 	mvn.w	r3, #2
 8004b32:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004b34:	69fb      	ldr	r3, [r7, #28]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000002c 	.word	0x2000002c

08004b44 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08c      	sub	sp, #48	; 0x30
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b54:	f3ef 8305 	mrs	r3, IPSR
 8004b58:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b5a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d170      	bne.n	8004c42 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b60:	f3ef 8310 	mrs	r3, PRIMASK
 8004b64:	617b      	str	r3, [r7, #20]
  return(result);
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d16a      	bne.n	8004c42 <osMessageQueueNew+0xfe>
 8004b6c:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <osMessageQueueNew+0x108>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d105      	bne.n	8004b80 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b74:	f3ef 8311 	mrs	r3, BASEPRI
 8004b78:	613b      	str	r3, [r7, #16]
  return(result);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d160      	bne.n	8004c42 <osMessageQueueNew+0xfe>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d05d      	beq.n	8004c42 <osMessageQueueNew+0xfe>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d05a      	beq.n	8004c42 <osMessageQueueNew+0xfe>
    mem = -1;
 8004b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d029      	beq.n	8004bec <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d012      	beq.n	8004bc6 <osMessageQueueNew+0x82>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b4f      	cmp	r3, #79	; 0x4f
 8004ba6:	d90e      	bls.n	8004bc6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68b9      	ldr	r1, [r7, #8]
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d302      	bcc.n	8004bc6 <osMessageQueueNew+0x82>
        mem = 1;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	623b      	str	r3, [r7, #32]
 8004bc4:	e014      	b.n	8004bf0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d110      	bne.n	8004bf0 <osMessageQueueNew+0xac>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d108      	bne.n	8004bf0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d104      	bne.n	8004bf0 <osMessageQueueNew+0xac>
          mem = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	623b      	str	r3, [r7, #32]
 8004bea:	e001      	b.n	8004bf0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d10c      	bne.n	8004c10 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6899      	ldr	r1, [r3, #8]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	460b      	mov	r3, r1
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 fa5a 	bl	80050c0 <xQueueGenericCreateStatic>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24
 8004c0e:	e008      	b.n	8004c22 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004c16:	2200      	movs	r2, #0
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 facc 	bl	80051b8 <xQueueGenericCreate>
 8004c20:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00c      	beq.n	8004c42 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <osMessageQueueNew+0xf2>
        name = attr->name;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e001      	b.n	8004c3a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004c3a:	69f9      	ldr	r1, [r7, #28]
 8004c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c3e:	f001 f913 	bl	8005e68 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3728      	adds	r7, #40	; 0x28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	2000002c 	.word	0x2000002c

08004c50 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c68:	f3ef 8305 	mrs	r3, IPSR
 8004c6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c6e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10f      	bne.n	8004c94 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c74:	f3ef 8310 	mrs	r3, PRIMASK
 8004c78:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <osMessageQueuePut+0x44>
 8004c80:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <osMessageQueuePut+0xe0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d12e      	bne.n	8004ce6 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c88:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8c:	617b      	str	r3, [r7, #20]
  return(result);
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d028      	beq.n	8004ce6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <osMessageQueuePut+0x56>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <osMessageQueuePut+0x56>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004ca6:	f06f 0303 	mvn.w	r3, #3
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cac:	e039      	b.n	8004d22 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004cb2:	f107 0210 	add.w	r2, r7, #16
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	6a38      	ldr	r0, [r7, #32]
 8004cbc:	f000 fc9a 	bl	80055f4 <xQueueGenericSendFromISR>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d003      	beq.n	8004cce <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004cc6:	f06f 0302 	mvn.w	r3, #2
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ccc:	e029      	b.n	8004d22 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d026      	beq.n	8004d22 <osMessageQueuePut+0xd2>
 8004cd4:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <osMessageQueuePut+0xe4>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ce4:	e01d      	b.n	8004d22 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <osMessageQueuePut+0xa2>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004cf2:	f06f 0303 	mvn.w	r3, #3
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf8:	e014      	b.n	8004d24 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	6a38      	ldr	r0, [r7, #32]
 8004d02:	f000 fb75 	bl	80053f0 <xQueueGenericSend>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d00b      	beq.n	8004d24 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004d12:	f06f 0301 	mvn.w	r3, #1
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
 8004d18:	e004      	b.n	8004d24 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004d1a:	f06f 0302 	mvn.w	r3, #2
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d20:	e000      	b.n	8004d24 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d22:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3728      	adds	r7, #40	; 0x28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	2000002c 	.word	0x2000002c
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d4e:	f3ef 8305 	mrs	r3, IPSR
 8004d52:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d54:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <osMessageQueueGet+0x42>
 8004d66:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <osMessageQueueGet+0xdc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d12e      	bne.n	8004dcc <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d72:	617b      	str	r3, [r7, #20]
  return(result);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d028      	beq.n	8004dcc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <osMessageQueueGet+0x54>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <osMessageQueueGet+0x54>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004d8c:	f06f 0303 	mvn.w	r3, #3
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d92:	e038      	b.n	8004e06 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	6a38      	ldr	r0, [r7, #32]
 8004da2:	f000 feb5 	bl	8005b10 <xQueueReceiveFromISR>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d003      	beq.n	8004db4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004dac:	f06f 0302 	mvn.w	r3, #2
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004db2:	e028      	b.n	8004e06 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d025      	beq.n	8004e06 <osMessageQueueGet+0xce>
 8004dba:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <osMessageQueueGet+0xe0>)
 8004dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004dca:	e01c      	b.n	8004e06 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <osMessageQueueGet+0xa0>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d103      	bne.n	8004de0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004dd8:	f06f 0303 	mvn.w	r3, #3
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dde:	e013      	b.n	8004e08 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	6a38      	ldr	r0, [r7, #32]
 8004de6:	f000 fca1 	bl	800572c <xQueueReceive>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d00b      	beq.n	8004e08 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004df6:	f06f 0301 	mvn.w	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	e004      	b.n	8004e08 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004dfe:	f06f 0302 	mvn.w	r3, #2
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
 8004e04:	e000      	b.n	8004e08 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e06:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3728      	adds	r7, #40	; 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	2000002c 	.word	0x2000002c
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a06      	ldr	r2, [pc, #24]	; (8004e4c <vApplicationGetIdleTaskMemory+0x30>)
 8004e32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	601a      	str	r2, [r3, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	20000030 	.word	0x20000030
 8004e4c:	2000008c 	.word	0x2000008c

08004e50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <vApplicationGetTimerTaskMemory+0x2c>)
 8004e60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a06      	ldr	r2, [pc, #24]	; (8004e80 <vApplicationGetTimerTaskMemory+0x30>)
 8004e66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e6e:	601a      	str	r2, [r3, #0]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	2000028c 	.word	0x2000028c
 8004e80:	200002e8 	.word	0x200002e8

08004e84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f103 0208 	add.w	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f103 0208 	add.w	r2, r3, #8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f103 0208 	add.w	r2, r3, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d103      	bne.n	8004f46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e00c      	b.n	8004f60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3308      	adds	r3, #8
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e002      	b.n	8004f54 <vListInsert+0x2e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d2f6      	bcs.n	8004f4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6892      	ldr	r2, [r2, #8]
 8004fae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6852      	ldr	r2, [r2, #4]
 8004fb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d103      	bne.n	8004fcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	1e5a      	subs	r2, r3, #1
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	b672      	cpsid	i
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	b662      	cpsie	i
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	e7fe      	b.n	8005016 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005018:	f002 fcbe 	bl	8007998 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	441a      	add	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005048:	3b01      	subs	r3, #1
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	22ff      	movs	r2, #255	; 0xff
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	22ff      	movs	r2, #255	; 0xff
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d114      	bne.n	8005098 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01a      	beq.n	80050ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3310      	adds	r3, #16
 800507a:	4618      	mov	r0, r3
 800507c:	f001 fcac 	bl	80069d8 <xTaskRemoveFromEventList>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d012      	beq.n	80050ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <xQueueGenericReset+0xd0>)
 8005088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	e009      	b.n	80050ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3310      	adds	r3, #16
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fef1 	bl	8004e84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3324      	adds	r3, #36	; 0x24
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff feec 	bl	8004e84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050ac:	f002 fca6 	bl	80079fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08e      	sub	sp, #56	; 0x38
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <xQueueGenericCreateStatic+0x2c>
 80050d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d8:	b672      	cpsid	i
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	b662      	cpsie	i
 80050e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ea:	e7fe      	b.n	80050ea <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <xQueueGenericCreateStatic+0x4a>
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	b672      	cpsid	i
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	b662      	cpsie	i
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
 8005108:	e7fe      	b.n	8005108 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <xQueueGenericCreateStatic+0x56>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <xQueueGenericCreateStatic+0x5a>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <xQueueGenericCreateStatic+0x5c>
 800511a:	2300      	movs	r3, #0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <xQueueGenericCreateStatic+0x78>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	b672      	cpsid	i
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	b662      	cpsie	i
 8005134:	623b      	str	r3, [r7, #32]
 8005136:	e7fe      	b.n	8005136 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <xQueueGenericCreateStatic+0x84>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <xQueueGenericCreateStatic+0x88>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <xQueueGenericCreateStatic+0x8a>
 8005148:	2300      	movs	r3, #0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <xQueueGenericCreateStatic+0xa6>
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	b672      	cpsid	i
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	b662      	cpsie	i
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	e7fe      	b.n	8005164 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005166:	2350      	movs	r3, #80	; 0x50
 8005168:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b50      	cmp	r3, #80	; 0x50
 800516e:	d00b      	beq.n	8005188 <xQueueGenericCreateStatic+0xc8>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	b672      	cpsid	i
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	b662      	cpsie	i
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	e7fe      	b.n	8005186 <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00d      	beq.n	80051ae <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800519a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	4613      	mov	r3, r2
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f844 	bl	8005236 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3730      	adds	r7, #48	; 0x30
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08a      	sub	sp, #40	; 0x28
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10b      	bne.n	80051e4 <xQueueGenericCreate+0x2c>
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	b672      	cpsid	i
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	b662      	cpsie	i
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	e7fe      	b.n	80051e2 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	e004      	b.n	80051fa <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	fb02 f303 	mul.w	r3, r2, r3
 80051f8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	3350      	adds	r3, #80	; 0x50
 80051fe:	4618      	mov	r0, r3
 8005200:	f002 fcec 	bl	8007bdc <pvPortMalloc>
 8005204:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00f      	beq.n	800522c <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	3350      	adds	r3, #80	; 0x50
 8005210:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800521a:	79fa      	ldrb	r2, [r7, #7]
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	4613      	mov	r3, r2
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	68b9      	ldr	r1, [r7, #8]
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f805 	bl	8005236 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800522c:	69bb      	ldr	r3, [r7, #24]
	}
 800522e:	4618      	mov	r0, r3
 8005230:	3720      	adds	r7, #32
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d103      	bne.n	8005252 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	e002      	b.n	8005258 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005264:	2101      	movs	r1, #1
 8005266:	69b8      	ldr	r0, [r7, #24]
 8005268:	f7ff fec0 	bl	8004fec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800529c:	2300      	movs	r3, #0
 800529e:	2200      	movs	r2, #0
 80052a0:	2100      	movs	r1, #0
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f8a4 	bl	80053f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052ba:	2301      	movs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6939      	ldr	r1, [r7, #16]
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f7ff ff75 	bl	80051b8 <xQueueGenericCreate>
 80052ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7ff ffd3 	bl	800527c <prvInitialiseMutex>

		return pxNewQueue;
 80052d6:	68fb      	ldr	r3, [r7, #12]
	}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	4603      	mov	r3, r0
 80052e8:	6039      	str	r1, [r7, #0]
 80052ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	2300      	movs	r3, #0
 80052f2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	6939      	ldr	r1, [r7, #16]
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f7ff fede 	bl	80050c0 <xQueueGenericCreateStatic>
 8005304:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff ffb8 	bl	800527c <prvInitialiseMutex>

		return pxNewQueue;
 800530c:	68fb      	ldr	r3, [r7, #12]
	}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005316:	b590      	push	{r4, r7, lr}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10b      	bne.n	8005340 <xQueueGiveMutexRecursive+0x2a>
 8005328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532c:	b672      	cpsid	i
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	b662      	cpsie	i
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	e7fe      	b.n	800533e <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	685c      	ldr	r4, [r3, #4]
 8005344:	f001 fd0c 	bl	8006d60 <xTaskGetCurrentTaskHandle>
 8005348:	4603      	mov	r3, r0
 800534a:	429c      	cmp	r4, r3
 800534c:	d111      	bne.n	8005372 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	1e5a      	subs	r2, r3, #1
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005360:	2300      	movs	r3, #0
 8005362:	2200      	movs	r2, #0
 8005364:	2100      	movs	r1, #0
 8005366:	6938      	ldr	r0, [r7, #16]
 8005368:	f000 f842 	bl	80053f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800536c:	2301      	movs	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	e001      	b.n	8005376 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005376:	697b      	ldr	r3, [r7, #20]
	}
 8005378:	4618      	mov	r0, r3
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	bd90      	pop	{r4, r7, pc}

08005380 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005380:	b590      	push	{r4, r7, lr}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <xQueueTakeMutexRecursive+0x2c>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	b672      	cpsid	i
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	b662      	cpsie	i
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e7fe      	b.n	80053aa <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685c      	ldr	r4, [r3, #4]
 80053b0:	f001 fcd6 	bl	8006d60 <xTaskGetCurrentTaskHandle>
 80053b4:	4603      	mov	r3, r0
 80053b6:	429c      	cmp	r4, r3
 80053b8:	d107      	bne.n	80053ca <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80053c4:	2301      	movs	r3, #1
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e00c      	b.n	80053e4 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6938      	ldr	r0, [r7, #16]
 80053ce:	f000 fa8f 	bl	80058f0 <xQueueSemaphoreTake>
 80053d2:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80053e4:	697b      	ldr	r3, [r7, #20]
	}
 80053e6:	4618      	mov	r0, r3
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd90      	pop	{r4, r7, pc}
	...

080053f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	; 0x38
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053fe:	2300      	movs	r3, #0
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <xQueueGenericSend+0x34>
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	b672      	cpsid	i
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	b662      	cpsie	i
 8005420:	62bb      	str	r3, [r7, #40]	; 0x28
 8005422:	e7fe      	b.n	8005422 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <xQueueGenericSend+0x42>
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <xQueueGenericSend+0x46>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <xQueueGenericSend+0x48>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <xQueueGenericSend+0x64>
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	b672      	cpsid	i
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	b662      	cpsie	i
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e7fe      	b.n	8005452 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d103      	bne.n	8005462 <xQueueGenericSend+0x72>
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <xQueueGenericSend+0x76>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <xQueueGenericSend+0x78>
 8005466:	2300      	movs	r3, #0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <xQueueGenericSend+0x94>
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	b672      	cpsid	i
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	b662      	cpsie	i
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	e7fe      	b.n	8005482 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005484:	f001 fc7c 	bl	8006d80 <xTaskGetSchedulerState>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d102      	bne.n	8005494 <xQueueGenericSend+0xa4>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <xQueueGenericSend+0xa8>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <xQueueGenericSend+0xaa>
 8005498:	2300      	movs	r3, #0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <xQueueGenericSend+0xc6>
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	b672      	cpsid	i
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	b662      	cpsie	i
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	e7fe      	b.n	80054b4 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b6:	f002 fa6f 	bl	8007998 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d302      	bcc.n	80054cc <xQueueGenericSend+0xdc>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d129      	bne.n	8005520 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054d2:	f000 fbb8 	bl	8005c46 <prvCopyDataToQueue>
 80054d6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	3324      	adds	r3, #36	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 fa77 	bl	80069d8 <xTaskRemoveFromEventList>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d013      	beq.n	8005518 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054f0:	4b3f      	ldr	r3, [pc, #252]	; (80055f0 <xQueueGenericSend+0x200>)
 80054f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	e00a      	b.n	8005518 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005508:	4b39      	ldr	r3, [pc, #228]	; (80055f0 <xQueueGenericSend+0x200>)
 800550a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005518:	f002 fa70 	bl	80079fc <vPortExitCritical>
				return pdPASS;
 800551c:	2301      	movs	r3, #1
 800551e:	e063      	b.n	80055e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d103      	bne.n	800552e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005526:	f002 fa69 	bl	80079fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800552a:	2300      	movs	r3, #0
 800552c:	e05c      	b.n	80055e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800552e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005534:	f107 0314 	add.w	r3, r7, #20
 8005538:	4618      	mov	r0, r3
 800553a:	f001 fab1 	bl	8006aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800553e:	2301      	movs	r3, #1
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005542:	f002 fa5b 	bl	80079fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005546:	f001 f81b 	bl	8006580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800554a:	f002 fa25 	bl	8007998 <vPortEnterCritical>
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005554:	b25b      	sxtb	r3, r3
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d103      	bne.n	8005564 <xQueueGenericSend+0x174>
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800556a:	b25b      	sxtb	r3, r3
 800556c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005570:	d103      	bne.n	800557a <xQueueGenericSend+0x18a>
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	2200      	movs	r2, #0
 8005576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800557a:	f002 fa3f 	bl	80079fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800557e:	1d3a      	adds	r2, r7, #4
 8005580:	f107 0314 	add.w	r3, r7, #20
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f001 faa0 	bl	8006acc <xTaskCheckForTimeOut>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d124      	bne.n	80055dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005592:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005594:	f000 fc4f 	bl	8005e36 <prvIsQueueFull>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d018      	beq.n	80055d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	3310      	adds	r3, #16
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4611      	mov	r1, r2
 80055a6:	4618      	mov	r0, r3
 80055a8:	f001 f9c4 	bl	8006934 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ae:	f000 fbda 	bl	8005d66 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055b2:	f000 fff3 	bl	800659c <xTaskResumeAll>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f47f af7c 	bne.w	80054b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <xQueueGenericSend+0x200>)
 80055c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	e772      	b.n	80054b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80055d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d2:	f000 fbc8 	bl	8005d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055d6:	f000 ffe1 	bl	800659c <xTaskResumeAll>
 80055da:	e76c      	b.n	80054b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80055dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055de:	f000 fbc2 	bl	8005d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055e2:	f000 ffdb 	bl	800659c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055e6:	2300      	movs	r3, #0
		}
	}
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3738      	adds	r7, #56	; 0x38
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b08e      	sub	sp, #56	; 0x38
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <xQueueGenericSendFromISR+0x30>
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	b672      	cpsid	i
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	b662      	cpsie	i
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
 8005622:	e7fe      	b.n	8005622 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d103      	bne.n	8005632 <xQueueGenericSendFromISR+0x3e>
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <xQueueGenericSendFromISR+0x42>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <xQueueGenericSendFromISR+0x44>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <xQueueGenericSendFromISR+0x60>
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	b672      	cpsid	i
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	b662      	cpsie	i
 8005650:	623b      	str	r3, [r7, #32]
 8005652:	e7fe      	b.n	8005652 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d103      	bne.n	8005662 <xQueueGenericSendFromISR+0x6e>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <xQueueGenericSendFromISR+0x72>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <xQueueGenericSendFromISR+0x74>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10b      	bne.n	8005684 <xQueueGenericSendFromISR+0x90>
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	b672      	cpsid	i
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	b662      	cpsie	i
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	e7fe      	b.n	8005682 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005684:	f002 fa68 	bl	8007b58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005688:	f3ef 8211 	mrs	r2, BASEPRI
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	b672      	cpsid	i
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	b662      	cpsie	i
 80056a0:	61ba      	str	r2, [r7, #24]
 80056a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <xQueueGenericSendFromISR+0xc6>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d12c      	bne.n	8005714 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056ca:	f000 fabc 	bl	8005c46 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056ce:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d112      	bne.n	80056fe <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d016      	beq.n	800570e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e2:	3324      	adds	r3, #36	; 0x24
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 f977 	bl	80069d8 <xTaskRemoveFromEventList>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00e      	beq.n	800570e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e007      	b.n	800570e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005702:	3301      	adds	r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	b25a      	sxtb	r2, r3
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800570e:	2301      	movs	r3, #1
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005712:	e001      	b.n	8005718 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005714:	2300      	movs	r3, #0
 8005716:	637b      	str	r3, [r7, #52]	; 0x34
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005724:	4618      	mov	r0, r3
 8005726:	3738      	adds	r7, #56	; 0x38
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	; 0x30
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005738:	2300      	movs	r3, #0
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10b      	bne.n	800575e <xQueueReceive+0x32>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	b672      	cpsid	i
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	b662      	cpsie	i
 800575a:	623b      	str	r3, [r7, #32]
 800575c:	e7fe      	b.n	800575c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d103      	bne.n	800576c <xQueueReceive+0x40>
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <xQueueReceive+0x44>
 800576c:	2301      	movs	r3, #1
 800576e:	e000      	b.n	8005772 <xQueueReceive+0x46>
 8005770:	2300      	movs	r3, #0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <xQueueReceive+0x62>
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	b672      	cpsid	i
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	b662      	cpsie	i
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e7fe      	b.n	800578c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578e:	f001 faf7 	bl	8006d80 <xTaskGetSchedulerState>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <xQueueReceive+0x72>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <xQueueReceive+0x76>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <xQueueReceive+0x78>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10b      	bne.n	80057c0 <xQueueReceive+0x94>
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	b672      	cpsid	i
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	b662      	cpsie	i
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e7fe      	b.n	80057be <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80057c0:	f002 f8ea 	bl	8007998 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01f      	beq.n	8005810 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d4:	f000 faa1 	bl	8005d1a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	1e5a      	subs	r2, r3, #1
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00f      	beq.n	8005808 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	3310      	adds	r3, #16
 80057ec:	4618      	mov	r0, r3
 80057ee:	f001 f8f3 	bl	80069d8 <xTaskRemoveFromEventList>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057f8:	4b3c      	ldr	r3, [pc, #240]	; (80058ec <xQueueReceive+0x1c0>)
 80057fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005808:	f002 f8f8 	bl	80079fc <vPortExitCritical>
				return pdPASS;
 800580c:	2301      	movs	r3, #1
 800580e:	e069      	b.n	80058e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005816:	f002 f8f1 	bl	80079fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800581a:	2300      	movs	r3, #0
 800581c:	e062      	b.n	80058e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d106      	bne.n	8005832 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005824:	f107 0310 	add.w	r3, r7, #16
 8005828:	4618      	mov	r0, r3
 800582a:	f001 f939 	bl	8006aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800582e:	2301      	movs	r3, #1
 8005830:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005832:	f002 f8e3 	bl	80079fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005836:	f000 fea3 	bl	8006580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800583a:	f002 f8ad 	bl	8007998 <vPortEnterCritical>
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005844:	b25b      	sxtb	r3, r3
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584a:	d103      	bne.n	8005854 <xQueueReceive+0x128>
 800584c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800585a:	b25b      	sxtb	r3, r3
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d103      	bne.n	800586a <xQueueReceive+0x13e>
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800586a:	f002 f8c7 	bl	80079fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800586e:	1d3a      	adds	r2, r7, #4
 8005870:	f107 0310 	add.w	r3, r7, #16
 8005874:	4611      	mov	r1, r2
 8005876:	4618      	mov	r0, r3
 8005878:	f001 f928 	bl	8006acc <xTaskCheckForTimeOut>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d123      	bne.n	80058ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005884:	f000 fac1 	bl	8005e0a <prvIsQueueEmpty>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d017      	beq.n	80058be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	3324      	adds	r3, #36	; 0x24
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f001 f84c 	bl	8006934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800589c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589e:	f000 fa62 	bl	8005d66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058a2:	f000 fe7b 	bl	800659c <xTaskResumeAll>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d189      	bne.n	80057c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <xQueueReceive+0x1c0>)
 80058ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	e780      	b.n	80057c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c0:	f000 fa51 	bl	8005d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058c4:	f000 fe6a 	bl	800659c <xTaskResumeAll>
 80058c8:	e77a      	b.n	80057c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058cc:	f000 fa4b 	bl	8005d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058d0:	f000 fe64 	bl	800659c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d6:	f000 fa98 	bl	8005e0a <prvIsQueueEmpty>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f43f af6f 	beq.w	80057c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3730      	adds	r7, #48	; 0x30
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	; 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005902:	2300      	movs	r3, #0
 8005904:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <xQueueSemaphoreTake+0x34>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	b672      	cpsid	i
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	b662      	cpsie	i
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	e7fe      	b.n	8005922 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00b      	beq.n	8005944 <xQueueSemaphoreTake+0x54>
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	b672      	cpsid	i
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	b662      	cpsie	i
 8005940:	61fb      	str	r3, [r7, #28]
 8005942:	e7fe      	b.n	8005942 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005944:	f001 fa1c 	bl	8006d80 <xTaskGetSchedulerState>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <xQueueSemaphoreTake+0x64>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <xQueueSemaphoreTake+0x68>
 8005954:	2301      	movs	r3, #1
 8005956:	e000      	b.n	800595a <xQueueSemaphoreTake+0x6a>
 8005958:	2300      	movs	r3, #0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10b      	bne.n	8005976 <xQueueSemaphoreTake+0x86>
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	b672      	cpsid	i
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	b662      	cpsie	i
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	e7fe      	b.n	8005974 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005976:	f002 f80f 	bl	8007998 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800597a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d024      	beq.n	80059d0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005996:	f001 fb77 	bl	8007088 <pvTaskIncrementMutexHeldCount>
 800599a:	4602      	mov	r2, r0
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00f      	beq.n	80059c8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	3310      	adds	r3, #16
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 f813 	bl	80069d8 <xTaskRemoveFromEventList>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059b8:	4b54      	ldr	r3, [pc, #336]	; (8005b0c <xQueueSemaphoreTake+0x21c>)
 80059ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059be:	601a      	str	r2, [r3, #0]
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059c8:	f002 f818 	bl	80079fc <vPortExitCritical>
				return pdPASS;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e098      	b.n	8005b02 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d112      	bne.n	80059fc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <xQueueSemaphoreTake+0x104>
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	b672      	cpsid	i
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	b662      	cpsie	i
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e7fe      	b.n	80059f2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80059f4:	f002 f802 	bl	80079fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059f8:	2300      	movs	r3, #0
 80059fa:	e082      	b.n	8005b02 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a02:	f107 030c 	add.w	r3, r7, #12
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f84a 	bl	8006aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a10:	f001 fff4 	bl	80079fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a14:	f000 fdb4 	bl	8006580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a18:	f001 ffbe 	bl	8007998 <vPortEnterCritical>
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d103      	bne.n	8005a32 <xQueueSemaphoreTake+0x142>
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a38:	b25b      	sxtb	r3, r3
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d103      	bne.n	8005a48 <xQueueSemaphoreTake+0x158>
 8005a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a48:	f001 ffd8 	bl	80079fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a4c:	463a      	mov	r2, r7
 8005a4e:	f107 030c 	add.w	r3, r7, #12
 8005a52:	4611      	mov	r1, r2
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 f839 	bl	8006acc <xTaskCheckForTimeOut>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d132      	bne.n	8005ac6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a62:	f000 f9d2 	bl	8005e0a <prvIsQueueEmpty>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d026      	beq.n	8005aba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d109      	bne.n	8005a88 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005a74:	f001 ff90 	bl	8007998 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 f99d 	bl	8006dbc <xTaskPriorityInherit>
 8005a82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005a84:	f001 ffba 	bl	80079fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8a:	3324      	adds	r3, #36	; 0x24
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 ff4f 	bl	8006934 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a98:	f000 f965 	bl	8005d66 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a9c:	f000 fd7e 	bl	800659c <xTaskResumeAll>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f47f af67 	bne.w	8005976 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005aa8:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <xQueueSemaphoreTake+0x21c>)
 8005aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	e75d      	b.n	8005976 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005aba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005abc:	f000 f953 	bl	8005d66 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac0:	f000 fd6c 	bl	800659c <xTaskResumeAll>
 8005ac4:	e757      	b.n	8005976 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ac8:	f000 f94d 	bl	8005d66 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005acc:	f000 fd66 	bl	800659c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ad2:	f000 f99a 	bl	8005e0a <prvIsQueueEmpty>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f43f af4c 	beq.w	8005976 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00d      	beq.n	8005b00 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005ae4:	f001 ff58 	bl	8007998 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aea:	f000 f894 	bl	8005c16 <prvGetDisinheritPriorityAfterTimeout>
 8005aee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 fa3e 	bl	8006f78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005afc:	f001 ff7e 	bl	80079fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3738      	adds	r7, #56	; 0x38
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	e000ed04 	.word	0xe000ed04

08005b10 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08e      	sub	sp, #56	; 0x38
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10b      	bne.n	8005b3e <xQueueReceiveFromISR+0x2e>
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	b672      	cpsid	i
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	b662      	cpsie	i
 8005b3a:	623b      	str	r3, [r7, #32]
 8005b3c:	e7fe      	b.n	8005b3c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <xQueueReceiveFromISR+0x3c>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <xQueueReceiveFromISR+0x40>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <xQueueReceiveFromISR+0x42>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <xQueueReceiveFromISR+0x5e>
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	b672      	cpsid	i
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	b662      	cpsie	i
 8005b6a:	61fb      	str	r3, [r7, #28]
 8005b6c:	e7fe      	b.n	8005b6c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b6e:	f001 fff3 	bl	8007b58 <vPortValidateInterruptPriority>
	__asm volatile
 8005b72:	f3ef 8211 	mrs	r2, BASEPRI
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	b672      	cpsid	i
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	b662      	cpsie	i
 8005b8a:	61ba      	str	r2, [r7, #24]
 8005b8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d02f      	beq.n	8005bfe <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bac:	f000 f8b5 	bl	8005d1a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	1e5a      	subs	r2, r3, #1
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005bb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d112      	bne.n	8005be8 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	3310      	adds	r3, #16
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ff02 	bl	80069d8 <xTaskRemoveFromEventList>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e007      	b.n	8005bf8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bec:	3301      	adds	r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	b25a      	sxtb	r2, r3
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bfc:	e001      	b.n	8005c02 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3738      	adds	r7, #56	; 0x38
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c16:	b480      	push	{r7}
 8005c18:	b085      	sub	sp, #20
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	e001      	b.n	8005c38 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c38:	68fb      	ldr	r3, [r7, #12]
	}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b086      	sub	sp, #24
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10d      	bne.n	8005c80 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d14d      	bne.n	8005d08 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 f911 	bl	8006e98 <xTaskPriorityDisinherit>
 8005c76:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	605a      	str	r2, [r3, #4]
 8005c7e:	e043      	b.n	8005d08 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d119      	bne.n	8005cba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6898      	ldr	r0, [r3, #8]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	f002 f9a7 	bl	8007fe4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	441a      	add	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d32b      	bcc.n	8005d08 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	e026      	b.n	8005d08 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68d8      	ldr	r0, [r3, #12]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	68b9      	ldr	r1, [r7, #8]
 8005cc6:	f002 f98d 	bl	8007fe4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	68da      	ldr	r2, [r3, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	425b      	negs	r3, r3
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d207      	bcs.n	8005cf6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685a      	ldr	r2, [r3, #4]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	425b      	negs	r3, r3
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d105      	bne.n	8005d08 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1c5a      	adds	r2, r3, #1
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d10:	697b      	ldr	r3, [r7, #20]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d018      	beq.n	8005d5e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	441a      	add	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d303      	bcc.n	8005d4e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68d9      	ldr	r1, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	461a      	mov	r2, r3
 8005d58:	6838      	ldr	r0, [r7, #0]
 8005d5a:	f002 f943 	bl	8007fe4 <memcpy>
	}
}
 8005d5e:	bf00      	nop
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d6e:	f001 fe13 	bl	8007998 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d78:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d7a:	e011      	b.n	8005da0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d012      	beq.n	8005daa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3324      	adds	r3, #36	; 0x24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fe25 	bl	80069d8 <xTaskRemoveFromEventList>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d94:	f000 fefe 	bl	8006b94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dce9      	bgt.n	8005d7c <prvUnlockQueue+0x16>
 8005da8:	e000      	b.n	8005dac <prvUnlockQueue+0x46>
					break;
 8005daa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	22ff      	movs	r2, #255	; 0xff
 8005db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005db4:	f001 fe22 	bl	80079fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005db8:	f001 fdee 	bl	8007998 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dc2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dc4:	e011      	b.n	8005dea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d012      	beq.n	8005df4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fe00 	bl	80069d8 <xTaskRemoveFromEventList>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dde:	f000 fed9 	bl	8006b94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005de2:	7bbb      	ldrb	r3, [r7, #14]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005dea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dce9      	bgt.n	8005dc6 <prvUnlockQueue+0x60>
 8005df2:	e000      	b.n	8005df6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005df4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005dfe:	f001 fdfd 	bl	80079fc <vPortExitCritical>
}
 8005e02:	bf00      	nop
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e12:	f001 fdc1 	bl	8007998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e001      	b.n	8005e28 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e28:	f001 fde8 	bl	80079fc <vPortExitCritical>

	return xReturn;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b084      	sub	sp, #16
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e3e:	f001 fdab 	bl	8007998 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d102      	bne.n	8005e54 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	e001      	b.n	8005e58 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e58:	f001 fdd0 	bl	80079fc <vPortExitCritical>

	return xReturn;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e014      	b.n	8005ea2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e78:	4a0e      	ldr	r2, [pc, #56]	; (8005eb4 <vQueueAddToRegistry+0x4c>)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e84:	490b      	ldr	r1, [pc, #44]	; (8005eb4 <vQueueAddToRegistry+0x4c>)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e8e:	4a09      	ldr	r2, [pc, #36]	; (8005eb4 <vQueueAddToRegistry+0x4c>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e9a:	e005      	b.n	8005ea8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b07      	cmp	r3, #7
 8005ea6:	d9e7      	bls.n	8005e78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ea8:	bf00      	nop
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	20004e58 	.word	0x20004e58

08005eb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ec8:	f001 fd66 	bl	8007998 <vPortEnterCritical>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ed2:	b25b      	sxtb	r3, r3
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d103      	bne.n	8005ee2 <vQueueWaitForMessageRestricted+0x2a>
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ee8:	b25b      	sxtb	r3, r3
 8005eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eee:	d103      	bne.n	8005ef8 <vQueueWaitForMessageRestricted+0x40>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ef8:	f001 fd80 	bl	80079fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d106      	bne.n	8005f12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	3324      	adds	r3, #36	; 0x24
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fd37 	bl	8006980 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f7ff ff27 	bl	8005d66 <prvUnlockQueue>
	}
 8005f18:	bf00      	nop
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b08e      	sub	sp, #56	; 0x38
 8005f24:	af04      	add	r7, sp, #16
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	b672      	cpsid	i
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	b662      	cpsie	i
 8005f48:	623b      	str	r3, [r7, #32]
 8005f4a:	e7fe      	b.n	8005f4a <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <xTaskCreateStatic+0x4a>
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	b672      	cpsid	i
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	b662      	cpsie	i
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	e7fe      	b.n	8005f68 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f6a:	235c      	movs	r3, #92	; 0x5c
 8005f6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b5c      	cmp	r3, #92	; 0x5c
 8005f72:	d00b      	beq.n	8005f8c <xTaskCreateStatic+0x6c>
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	b672      	cpsid	i
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	b662      	cpsie	i
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e7fe      	b.n	8005f8a <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01e      	beq.n	8005fd0 <xTaskCreateStatic+0xb0>
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01b      	beq.n	8005fd0 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005faa:	2300      	movs	r3, #0
 8005fac:	9303      	str	r3, [sp, #12]
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	9302      	str	r3, [sp, #8]
 8005fb2:	f107 0314 	add.w	r3, r7, #20
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 f850 	bl	8006068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fca:	f000 f8d5 	bl	8006178 <prvAddNewTaskToReadyList>
 8005fce:	e001      	b.n	8005fd4 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fd4:	697b      	ldr	r3, [r7, #20]
	}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3728      	adds	r7, #40	; 0x28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b08c      	sub	sp, #48	; 0x30
 8005fe2:	af04      	add	r7, sp, #16
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	603b      	str	r3, [r7, #0]
 8005fea:	4613      	mov	r3, r2
 8005fec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fdf2 	bl	8007bdc <pvPortMalloc>
 8005ff8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00e      	beq.n	800601e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006000:	205c      	movs	r0, #92	; 0x5c
 8006002:	f001 fdeb 	bl	8007bdc <pvPortMalloc>
 8006006:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
 8006014:	e005      	b.n	8006022 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006016:	6978      	ldr	r0, [r7, #20]
 8006018:	f001 fea8 	bl	8007d6c <vPortFree>
 800601c:	e001      	b.n	8006022 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d017      	beq.n	8006058 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006030:	88fa      	ldrh	r2, [r7, #6]
 8006032:	2300      	movs	r3, #0
 8006034:	9303      	str	r3, [sp, #12]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	9302      	str	r3, [sp, #8]
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f80e 	bl	8006068 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800604c:	69f8      	ldr	r0, [r7, #28]
 800604e:	f000 f893 	bl	8006178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006052:	2301      	movs	r3, #1
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e002      	b.n	800605e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006058:	f04f 33ff 	mov.w	r3, #4294967295
 800605c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800605e:	69bb      	ldr	r3, [r7, #24]
	}
 8006060:	4618      	mov	r0, r3
 8006062:	3720      	adds	r7, #32
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006078:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	461a      	mov	r2, r3
 8006080:	21a5      	movs	r1, #165	; 0xa5
 8006082:	f001 ffba 	bl	8007ffa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006090:	440b      	add	r3, r1
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f023 0307 	bic.w	r3, r3, #7
 800609e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <prvInitialiseNewTask+0x5a>
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	b672      	cpsid	i
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	b662      	cpsie	i
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	e7fe      	b.n	80060c0 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	e012      	b.n	80060ee <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	4413      	add	r3, r2
 80060ce:	7819      	ldrb	r1, [r3, #0]
 80060d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	3334      	adds	r3, #52	; 0x34
 80060d8:	460a      	mov	r2, r1
 80060da:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	2b0f      	cmp	r3, #15
 80060f2:	d9e9      	bls.n	80060c8 <prvInitialiseNewTask+0x60>
 80060f4:	e000      	b.n	80060f8 <prvInitialiseNewTask+0x90>
		{
			break;
 80060f6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	2b37      	cmp	r3, #55	; 0x37
 8006104:	d901      	bls.n	800610a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006106:	2337      	movs	r3, #55	; 0x37
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006114:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2200      	movs	r2, #0
 800611a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	3304      	adds	r3, #4
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fecf 	bl	8004ec4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	3318      	adds	r3, #24
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe feca 	bl	8004ec4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006134:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006144:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	2200      	movs	r2, #0
 800614a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	69b8      	ldr	r0, [r7, #24]
 800615a:	f001 fb15 	bl	8007788 <pxPortInitialiseStack>
 800615e:	4602      	mov	r2, r0
 8006160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006162:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d002      	beq.n	8006170 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800616e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006170:	bf00      	nop
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006180:	f001 fc0a 	bl	8007998 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006184:	4b2d      	ldr	r3, [pc, #180]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	4a2c      	ldr	r2, [pc, #176]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 800618c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800618e:	4b2c      	ldr	r3, [pc, #176]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006196:	4a2a      	ldr	r2, [pc, #168]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <prvAddNewTaskToReadyList+0xc4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d110      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061a4:	f000 fd1a 	bl	8006bdc <prvInitialiseTaskLists>
 80061a8:	e00d      	b.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061aa:	4b26      	ldr	r3, [pc, #152]	; (8006244 <prvAddNewTaskToReadyList+0xcc>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061b2:	4b23      	ldr	r3, [pc, #140]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d802      	bhi.n	80061c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061c0:	4a1f      	ldr	r2, [pc, #124]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	4a1e      	ldr	r2, [pc, #120]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061d0:	4b1d      	ldr	r3, [pc, #116]	; (8006248 <prvAddNewTaskToReadyList+0xd0>)
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4b1b      	ldr	r3, [pc, #108]	; (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <prvAddNewTaskToReadyList+0x74>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a18      	ldr	r2, [pc, #96]	; (800624c <prvAddNewTaskToReadyList+0xd4>)
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4a15      	ldr	r2, [pc, #84]	; (8006250 <prvAddNewTaskToReadyList+0xd8>)
 80061fa:	441a      	add	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f7fe fe6b 	bl	8004ede <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006208:	f001 fbf8 	bl	80079fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <prvAddNewTaskToReadyList+0xcc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00e      	beq.n	8006232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006214:	4b0a      	ldr	r3, [pc, #40]	; (8006240 <prvAddNewTaskToReadyList+0xc8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d207      	bcs.n	8006232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006222:	4b0c      	ldr	r3, [pc, #48]	; (8006254 <prvAddNewTaskToReadyList+0xdc>)
 8006224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006232:	bf00      	nop
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000bbc 	.word	0x20000bbc
 8006240:	200006e8 	.word	0x200006e8
 8006244:	20000bc8 	.word	0x20000bc8
 8006248:	20000bd8 	.word	0x20000bd8
 800624c:	20000bc4 	.word	0x20000bc4
 8006250:	200006ec 	.word	0x200006ec
 8006254:	e000ed04 	.word	0xe000ed04

08006258 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d018      	beq.n	800629c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800626a:	4b14      	ldr	r3, [pc, #80]	; (80062bc <vTaskDelay+0x64>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00b      	beq.n	800628a <vTaskDelay+0x32>
 8006272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006276:	b672      	cpsid	i
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	b662      	cpsie	i
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	e7fe      	b.n	8006288 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800628a:	f000 f979 	bl	8006580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800628e:	2100      	movs	r1, #0
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 ff0d 	bl	80070b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006296:	f000 f981 	bl	800659c <xTaskResumeAll>
 800629a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <vTaskDelay+0x68>)
 80062a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062b2:	bf00      	nop
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000be4 	.word	0x20000be4
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10b      	bne.n	80062ee <eTaskGetState+0x2a>
 80062d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062da:	b672      	cpsid	i
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	b662      	cpsie	i
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	e7fe      	b.n	80062ec <eTaskGetState+0x28>

		if( pxTCB == pxCurrentTCB )
 80062ee:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <eTaskGetState+0xa0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d102      	bne.n	80062fe <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80062f8:	2300      	movs	r3, #0
 80062fa:	75fb      	strb	r3, [r7, #23]
 80062fc:	e02d      	b.n	800635a <eTaskGetState+0x96>
		}
		else
		{
			taskENTER_CRITICAL();
 80062fe:	f001 fb4b 	bl	8007998 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006308:	f001 fb78 	bl	80079fc <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800630c:	4b16      	ldr	r3, [pc, #88]	; (8006368 <eTaskGetState+0xa4>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	429a      	cmp	r2, r3
 8006314:	d004      	beq.n	8006320 <eTaskGetState+0x5c>
 8006316:	4b15      	ldr	r3, [pc, #84]	; (800636c <eTaskGetState+0xa8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	429a      	cmp	r2, r3
 800631e:	d102      	bne.n	8006326 <eTaskGetState+0x62>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006320:	2302      	movs	r3, #2
 8006322:	75fb      	strb	r3, [r7, #23]
 8006324:	e019      	b.n	800635a <eTaskGetState+0x96>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4a11      	ldr	r2, [pc, #68]	; (8006370 <eTaskGetState+0xac>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d109      	bne.n	8006342 <eTaskGetState+0x7e>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <eTaskGetState+0x78>
					{
						eReturn = eSuspended;
 8006336:	2303      	movs	r3, #3
 8006338:	75fb      	strb	r3, [r7, #23]
 800633a:	e00e      	b.n	800635a <eTaskGetState+0x96>
					}
					else
					{
						eReturn = eBlocked;
 800633c:	2302      	movs	r3, #2
 800633e:	75fb      	strb	r3, [r7, #23]
 8006340:	e00b      	b.n	800635a <eTaskGetState+0x96>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a0b      	ldr	r2, [pc, #44]	; (8006374 <eTaskGetState+0xb0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d002      	beq.n	8006350 <eTaskGetState+0x8c>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <eTaskGetState+0x92>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006350:	2304      	movs	r3, #4
 8006352:	75fb      	strb	r3, [r7, #23]
 8006354:	e001      	b.n	800635a <eTaskGetState+0x96>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 800635a:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	200006e8 	.word	0x200006e8
 8006368:	20000b74 	.word	0x20000b74
 800636c:	20000b78 	.word	0x20000b78
 8006370:	20000ba8 	.word	0x20000ba8
 8006374:	20000b90 	.word	0x20000b90

08006378 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006378:	b480      	push	{r7}
 800637a:	b087      	sub	sp, #28
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10b      	bne.n	80063a6 <prvTaskIsTaskSuspended+0x2e>
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	b672      	cpsid	i
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	b662      	cpsie	i
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	e7fe      	b.n	80063a4 <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	4a0f      	ldr	r2, [pc, #60]	; (80063e8 <prvTaskIsTaskSuspended+0x70>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d101      	bne.n	80063b4 <prvTaskIsTaskSuspended+0x3c>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e000      	b.n	80063b6 <prvTaskIsTaskSuspended+0x3e>
 80063b4:	2300      	movs	r3, #0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00f      	beq.n	80063da <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063be:	4a0b      	ldr	r2, [pc, #44]	; (80063ec <prvTaskIsTaskSuspended+0x74>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00a      	beq.n	80063da <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <prvTaskIsTaskSuspended+0x58>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <prvTaskIsTaskSuspended+0x5a>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 80063d6:	2301      	movs	r3, #1
 80063d8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80063da:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80063dc:	4618      	mov	r0, r3
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	20000ba8 	.word	0x20000ba8
 80063ec:	20000b7c 	.word	0x20000b7c

080063f0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <vTaskResume+0x2a>
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	b672      	cpsid	i
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	b662      	cpsie	i
 8006416:	60bb      	str	r3, [r7, #8]
 8006418:	e7fe      	b.n	8006418 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d03a      	beq.n	8006496 <vTaskResume+0xa6>
 8006420:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <vTaskResume+0xb0>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	429a      	cmp	r2, r3
 8006428:	d035      	beq.n	8006496 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800642a:	f001 fab5 	bl	8007998 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7ff ffa2 	bl	8006378 <prvTaskIsTaskSuspended>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d02b      	beq.n	8006492 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fdaa 	bl	8004f98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <vTaskResume+0xb4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d903      	bls.n	8006458 <vTaskResume+0x68>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <vTaskResume+0xb4>)
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4a10      	ldr	r2, [pc, #64]	; (80064a8 <vTaskResume+0xb8>)
 8006466:	441a      	add	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3304      	adds	r3, #4
 800646c:	4619      	mov	r1, r3
 800646e:	4610      	mov	r0, r2
 8006470:	f7fe fd35 	bl	8004ede <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <vTaskResume+0xb0>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	429a      	cmp	r2, r3
 8006480:	d307      	bcc.n	8006492 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006482:	4b0a      	ldr	r3, [pc, #40]	; (80064ac <vTaskResume+0xbc>)
 8006484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006492:	f001 fab3 	bl	80079fc <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200006e8 	.word	0x200006e8
 80064a4:	20000bc4 	.word	0x20000bc4
 80064a8:	200006ec 	.word	0x200006ec
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08a      	sub	sp, #40	; 0x28
 80064b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064ba:	2300      	movs	r3, #0
 80064bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064be:	463a      	mov	r2, r7
 80064c0:	1d39      	adds	r1, r7, #4
 80064c2:	f107 0308 	add.w	r3, r7, #8
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fca8 	bl	8004e1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	9202      	str	r2, [sp, #8]
 80064d4:	9301      	str	r3, [sp, #4]
 80064d6:	2300      	movs	r3, #0
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	2300      	movs	r3, #0
 80064dc:	460a      	mov	r2, r1
 80064de:	4922      	ldr	r1, [pc, #136]	; (8006568 <vTaskStartScheduler+0xb8>)
 80064e0:	4822      	ldr	r0, [pc, #136]	; (800656c <vTaskStartScheduler+0xbc>)
 80064e2:	f7ff fd1d 	bl	8005f20 <xTaskCreateStatic>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b21      	ldr	r3, [pc, #132]	; (8006570 <vTaskStartScheduler+0xc0>)
 80064ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064ec:	4b20      	ldr	r3, [pc, #128]	; (8006570 <vTaskStartScheduler+0xc0>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064f4:	2301      	movs	r3, #1
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	e001      	b.n	80064fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d102      	bne.n	800650a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006504:	f000 fe28 	bl	8007158 <xTimerCreateTimerTask>
 8006508:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d117      	bne.n	8006540 <vTaskStartScheduler+0x90>
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	b672      	cpsid	i
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	b662      	cpsie	i
 8006524:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006526:	4b13      	ldr	r3, [pc, #76]	; (8006574 <vTaskStartScheduler+0xc4>)
 8006528:	f04f 32ff 	mov.w	r2, #4294967295
 800652c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <vTaskStartScheduler+0xc8>)
 8006530:	2201      	movs	r2, #1
 8006532:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006534:	4b11      	ldr	r3, [pc, #68]	; (800657c <vTaskStartScheduler+0xcc>)
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800653a:	f001 f9b1 	bl	80078a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800653e:	e00f      	b.n	8006560 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d10b      	bne.n	8006560 <vTaskStartScheduler+0xb0>
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	b672      	cpsid	i
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	b662      	cpsie	i
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	e7fe      	b.n	800655e <vTaskStartScheduler+0xae>
}
 8006560:	bf00      	nop
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	08008058 	.word	0x08008058
 800656c:	08006bad 	.word	0x08006bad
 8006570:	20000be0 	.word	0x20000be0
 8006574:	20000bdc 	.word	0x20000bdc
 8006578:	20000bc8 	.word	0x20000bc8
 800657c:	20000bc0 	.word	0x20000bc0

08006580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006584:	4b04      	ldr	r3, [pc, #16]	; (8006598 <vTaskSuspendAll+0x18>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	4a03      	ldr	r2, [pc, #12]	; (8006598 <vTaskSuspendAll+0x18>)
 800658c:	6013      	str	r3, [r2, #0]
}
 800658e:	bf00      	nop
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	20000be4 	.word	0x20000be4

0800659c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065a6:	2300      	movs	r3, #0
 80065a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065aa:	4b42      	ldr	r3, [pc, #264]	; (80066b4 <xTaskResumeAll+0x118>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <xTaskResumeAll+0x2e>
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	b672      	cpsid	i
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	b662      	cpsie	i
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	e7fe      	b.n	80065c8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065ca:	f001 f9e5 	bl	8007998 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065ce:	4b39      	ldr	r3, [pc, #228]	; (80066b4 <xTaskResumeAll+0x118>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3b01      	subs	r3, #1
 80065d4:	4a37      	ldr	r2, [pc, #220]	; (80066b4 <xTaskResumeAll+0x118>)
 80065d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d8:	4b36      	ldr	r3, [pc, #216]	; (80066b4 <xTaskResumeAll+0x118>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d162      	bne.n	80066a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065e0:	4b35      	ldr	r3, [pc, #212]	; (80066b8 <xTaskResumeAll+0x11c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d05e      	beq.n	80066a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065e8:	e02f      	b.n	800664a <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80065ea:	4b34      	ldr	r3, [pc, #208]	; (80066bc <xTaskResumeAll+0x120>)
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3318      	adds	r3, #24
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fcce 	bl	8004f98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7fe fcc9 	bl	8004f98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660a:	4b2d      	ldr	r3, [pc, #180]	; (80066c0 <xTaskResumeAll+0x124>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d903      	bls.n	800661a <xTaskResumeAll+0x7e>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	4a2a      	ldr	r2, [pc, #168]	; (80066c0 <xTaskResumeAll+0x124>)
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4a27      	ldr	r2, [pc, #156]	; (80066c4 <xTaskResumeAll+0x128>)
 8006628:	441a      	add	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3304      	adds	r3, #4
 800662e:	4619      	mov	r1, r3
 8006630:	4610      	mov	r0, r2
 8006632:	f7fe fc54 	bl	8004ede <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <xTaskResumeAll+0x12c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006644:	4b21      	ldr	r3, [pc, #132]	; (80066cc <xTaskResumeAll+0x130>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800664a:	4b1c      	ldr	r3, [pc, #112]	; (80066bc <xTaskResumeAll+0x120>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1cb      	bne.n	80065ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006658:	f000 fb5c 	bl	8006d14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800665c:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <xTaskResumeAll+0x134>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d010      	beq.n	800668a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006668:	f000 f846 	bl	80066f8 <xTaskIncrementTick>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006672:	4b16      	ldr	r3, [pc, #88]	; (80066cc <xTaskResumeAll+0x130>)
 8006674:	2201      	movs	r2, #1
 8006676:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3b01      	subs	r3, #1
 800667c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f1      	bne.n	8006668 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006684:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <xTaskResumeAll+0x134>)
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800668a:	4b10      	ldr	r3, [pc, #64]	; (80066cc <xTaskResumeAll+0x130>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d009      	beq.n	80066a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006692:	2301      	movs	r3, #1
 8006694:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006696:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <xTaskResumeAll+0x138>)
 8006698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066a6:	f001 f9a9 	bl	80079fc <vPortExitCritical>

	return xAlreadyYielded;
 80066aa:	68bb      	ldr	r3, [r7, #8]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000be4 	.word	0x20000be4
 80066b8:	20000bbc 	.word	0x20000bbc
 80066bc:	20000b7c 	.word	0x20000b7c
 80066c0:	20000bc4 	.word	0x20000bc4
 80066c4:	200006ec 	.word	0x200006ec
 80066c8:	200006e8 	.word	0x200006e8
 80066cc:	20000bd0 	.word	0x20000bd0
 80066d0:	20000bcc 	.word	0x20000bcc
 80066d4:	e000ed04 	.word	0xe000ed04

080066d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066de:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <xTaskGetTickCount+0x1c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066e4:	687b      	ldr	r3, [r7, #4]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000bc0 	.word	0x20000bc0

080066f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006702:	4b52      	ldr	r3, [pc, #328]	; (800684c <xTaskIncrementTick+0x154>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f040 808f 	bne.w	800682a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800670c:	4b50      	ldr	r3, [pc, #320]	; (8006850 <xTaskIncrementTick+0x158>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006714:	4a4e      	ldr	r2, [pc, #312]	; (8006850 <xTaskIncrementTick+0x158>)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d121      	bne.n	8006764 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006720:	4b4c      	ldr	r3, [pc, #304]	; (8006854 <xTaskIncrementTick+0x15c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <xTaskIncrementTick+0x4a>
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	b672      	cpsid	i
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	b662      	cpsie	i
 800673e:	603b      	str	r3, [r7, #0]
 8006740:	e7fe      	b.n	8006740 <xTaskIncrementTick+0x48>
 8006742:	4b44      	ldr	r3, [pc, #272]	; (8006854 <xTaskIncrementTick+0x15c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	4b43      	ldr	r3, [pc, #268]	; (8006858 <xTaskIncrementTick+0x160>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a41      	ldr	r2, [pc, #260]	; (8006854 <xTaskIncrementTick+0x15c>)
 800674e:	6013      	str	r3, [r2, #0]
 8006750:	4a41      	ldr	r2, [pc, #260]	; (8006858 <xTaskIncrementTick+0x160>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	4b41      	ldr	r3, [pc, #260]	; (800685c <xTaskIncrementTick+0x164>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3301      	adds	r3, #1
 800675c:	4a3f      	ldr	r2, [pc, #252]	; (800685c <xTaskIncrementTick+0x164>)
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	f000 fad8 	bl	8006d14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006764:	4b3e      	ldr	r3, [pc, #248]	; (8006860 <xTaskIncrementTick+0x168>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	429a      	cmp	r2, r3
 800676c:	d34e      	bcc.n	800680c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800676e:	4b39      	ldr	r3, [pc, #228]	; (8006854 <xTaskIncrementTick+0x15c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <xTaskIncrementTick+0x84>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <xTaskIncrementTick+0x86>
 800677c:	2300      	movs	r3, #0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d004      	beq.n	800678c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006782:	4b37      	ldr	r3, [pc, #220]	; (8006860 <xTaskIncrementTick+0x168>)
 8006784:	f04f 32ff 	mov.w	r2, #4294967295
 8006788:	601a      	str	r2, [r3, #0]
					break;
 800678a:	e03f      	b.n	800680c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800678c:	4b31      	ldr	r3, [pc, #196]	; (8006854 <xTaskIncrementTick+0x15c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d203      	bcs.n	80067ac <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067a4:	4a2e      	ldr	r2, [pc, #184]	; (8006860 <xTaskIncrementTick+0x168>)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6013      	str	r3, [r2, #0]
						break;
 80067aa:	e02f      	b.n	800680c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fe fbf1 	bl	8004f98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d004      	beq.n	80067c8 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	3318      	adds	r3, #24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fbe8 	bl	8004f98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067cc:	4b25      	ldr	r3, [pc, #148]	; (8006864 <xTaskIncrementTick+0x16c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d903      	bls.n	80067dc <xTaskIncrementTick+0xe4>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	4a22      	ldr	r2, [pc, #136]	; (8006864 <xTaskIncrementTick+0x16c>)
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e0:	4613      	mov	r3, r2
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	4a1f      	ldr	r2, [pc, #124]	; (8006868 <xTaskIncrementTick+0x170>)
 80067ea:	441a      	add	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	3304      	adds	r3, #4
 80067f0:	4619      	mov	r1, r3
 80067f2:	4610      	mov	r0, r2
 80067f4:	f7fe fb73 	bl	8004ede <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fc:	4b1b      	ldr	r3, [pc, #108]	; (800686c <xTaskIncrementTick+0x174>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	429a      	cmp	r2, r3
 8006804:	d3b3      	bcc.n	800676e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006806:	2301      	movs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800680a:	e7b0      	b.n	800676e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800680c:	4b17      	ldr	r3, [pc, #92]	; (800686c <xTaskIncrementTick+0x174>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006812:	4915      	ldr	r1, [pc, #84]	; (8006868 <xTaskIncrementTick+0x170>)
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	440b      	add	r3, r1
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d907      	bls.n	8006834 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006824:	2301      	movs	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e004      	b.n	8006834 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800682a:	4b11      	ldr	r3, [pc, #68]	; (8006870 <xTaskIncrementTick+0x178>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3301      	adds	r3, #1
 8006830:	4a0f      	ldr	r2, [pc, #60]	; (8006870 <xTaskIncrementTick+0x178>)
 8006832:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006834:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <xTaskIncrementTick+0x17c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006840:	697b      	ldr	r3, [r7, #20]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000be4 	.word	0x20000be4
 8006850:	20000bc0 	.word	0x20000bc0
 8006854:	20000b74 	.word	0x20000b74
 8006858:	20000b78 	.word	0x20000b78
 800685c:	20000bd4 	.word	0x20000bd4
 8006860:	20000bdc 	.word	0x20000bdc
 8006864:	20000bc4 	.word	0x20000bc4
 8006868:	200006ec 	.word	0x200006ec
 800686c:	200006e8 	.word	0x200006e8
 8006870:	20000bcc 	.word	0x20000bcc
 8006874:	20000bd0 	.word	0x20000bd0

08006878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800687e:	4b28      	ldr	r3, [pc, #160]	; (8006920 <vTaskSwitchContext+0xa8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006886:	4b27      	ldr	r3, [pc, #156]	; (8006924 <vTaskSwitchContext+0xac>)
 8006888:	2201      	movs	r2, #1
 800688a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800688c:	e042      	b.n	8006914 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800688e:	4b25      	ldr	r3, [pc, #148]	; (8006924 <vTaskSwitchContext+0xac>)
 8006890:	2200      	movs	r2, #0
 8006892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006894:	4b24      	ldr	r3, [pc, #144]	; (8006928 <vTaskSwitchContext+0xb0>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e011      	b.n	80068c0 <vTaskSwitchContext+0x48>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <vTaskSwitchContext+0x42>
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	b672      	cpsid	i
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	b662      	cpsie	i
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	e7fe      	b.n	80068b8 <vTaskSwitchContext+0x40>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3b01      	subs	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	491a      	ldr	r1, [pc, #104]	; (800692c <vTaskSwitchContext+0xb4>)
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0e3      	beq.n	800689c <vTaskSwitchContext+0x24>
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	4a13      	ldr	r2, [pc, #76]	; (800692c <vTaskSwitchContext+0xb4>)
 80068e0:	4413      	add	r3, r2
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3308      	adds	r3, #8
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d104      	bne.n	8006904 <vTaskSwitchContext+0x8c>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	605a      	str	r2, [r3, #4]
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	4a09      	ldr	r2, [pc, #36]	; (8006930 <vTaskSwitchContext+0xb8>)
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4a06      	ldr	r2, [pc, #24]	; (8006928 <vTaskSwitchContext+0xb0>)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6013      	str	r3, [r2, #0]
}
 8006914:	bf00      	nop
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	20000be4 	.word	0x20000be4
 8006924:	20000bd0 	.word	0x20000bd0
 8006928:	20000bc4 	.word	0x20000bc4
 800692c:	200006ec 	.word	0x200006ec
 8006930:	200006e8 	.word	0x200006e8

08006934 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <vTaskPlaceOnEventList+0x28>
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	b672      	cpsid	i
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	b662      	cpsie	i
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e7fe      	b.n	800695a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800695c:	4b07      	ldr	r3, [pc, #28]	; (800697c <vTaskPlaceOnEventList+0x48>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3318      	adds	r3, #24
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7fe fade 	bl	8004f26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800696a:	2101      	movs	r1, #1
 800696c:	6838      	ldr	r0, [r7, #0]
 800696e:	f000 fb9f 	bl	80070b0 <prvAddCurrentTaskToDelayedList>
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	200006e8 	.word	0x200006e8

08006980 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10b      	bne.n	80069aa <vTaskPlaceOnEventListRestricted+0x2a>
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	b672      	cpsid	i
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	b662      	cpsie	i
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e7fe      	b.n	80069a8 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069aa:	4b0a      	ldr	r3, [pc, #40]	; (80069d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3318      	adds	r3, #24
 80069b0:	4619      	mov	r1, r3
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7fe fa93 	bl	8004ede <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	68b8      	ldr	r0, [r7, #8]
 80069c8:	f000 fb72 	bl	80070b0 <prvAddCurrentTaskToDelayedList>
	}
 80069cc:	bf00      	nop
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	200006e8 	.word	0x200006e8

080069d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10b      	bne.n	8006a06 <xTaskRemoveFromEventList+0x2e>
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	b672      	cpsid	i
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	b662      	cpsie	i
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e7fe      	b.n	8006a04 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	3318      	adds	r3, #24
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fac4 	bl	8004f98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a10:	4b1d      	ldr	r3, [pc, #116]	; (8006a88 <xTaskRemoveFromEventList+0xb0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d11d      	bne.n	8006a54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe fabb 	bl	8004f98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a26:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <xTaskRemoveFromEventList+0xb4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d903      	bls.n	8006a36 <xTaskRemoveFromEventList+0x5e>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	4a16      	ldr	r2, [pc, #88]	; (8006a8c <xTaskRemoveFromEventList+0xb4>)
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <xTaskRemoveFromEventList+0xb8>)
 8006a44:	441a      	add	r2, r3
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f7fe fa46 	bl	8004ede <vListInsertEnd>
 8006a52:	e005      	b.n	8006a60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	3318      	adds	r3, #24
 8006a58:	4619      	mov	r1, r3
 8006a5a:	480e      	ldr	r0, [pc, #56]	; (8006a94 <xTaskRemoveFromEventList+0xbc>)
 8006a5c:	f7fe fa3f 	bl	8004ede <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a64:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <xTaskRemoveFromEventList+0xc0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d905      	bls.n	8006a7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <xTaskRemoveFromEventList+0xc4>)
 8006a74:	2201      	movs	r2, #1
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e001      	b.n	8006a7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006a7e:	697b      	ldr	r3, [r7, #20]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000be4 	.word	0x20000be4
 8006a8c:	20000bc4 	.word	0x20000bc4
 8006a90:	200006ec 	.word	0x200006ec
 8006a94:	20000b7c 	.word	0x20000b7c
 8006a98:	200006e8 	.word	0x200006e8
 8006a9c:	20000bd0 	.word	0x20000bd0

08006aa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <vTaskInternalSetTimeOutState+0x24>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <vTaskInternalSetTimeOutState+0x28>)
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	605a      	str	r2, [r3, #4]
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	20000bd4 	.word	0x20000bd4
 8006ac8:	20000bc0 	.word	0x20000bc0

08006acc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xTaskCheckForTimeOut+0x28>
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	b672      	cpsid	i
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	b662      	cpsie	i
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	e7fe      	b.n	8006af2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10b      	bne.n	8006b12 <xTaskCheckForTimeOut+0x46>
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	b672      	cpsid	i
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	b662      	cpsie	i
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	e7fe      	b.n	8006b10 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8006b12:	f000 ff41 	bl	8007998 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b16:	4b1d      	ldr	r3, [pc, #116]	; (8006b8c <xTaskCheckForTimeOut+0xc0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2e:	d102      	bne.n	8006b36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e023      	b.n	8006b7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <xTaskCheckForTimeOut+0xc4>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d007      	beq.n	8006b52 <xTaskCheckForTimeOut+0x86>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	61fb      	str	r3, [r7, #28]
 8006b50:	e015      	b.n	8006b7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d20b      	bcs.n	8006b74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ff99 	bl	8006aa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	e004      	b.n	8006b7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b7e:	f000 ff3d 	bl	80079fc <vPortExitCritical>

	return xReturn;
 8006b82:	69fb      	ldr	r3, [r7, #28]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3720      	adds	r7, #32
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000bc0 	.word	0x20000bc0
 8006b90:	20000bd4 	.word	0x20000bd4

08006b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b98:	4b03      	ldr	r3, [pc, #12]	; (8006ba8 <vTaskMissedYield+0x14>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	20000bd0 	.word	0x20000bd0

08006bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bb4:	f000 f852 	bl	8006c5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bb8:	4b06      	ldr	r3, [pc, #24]	; (8006bd4 <prvIdleTask+0x28>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d9f9      	bls.n	8006bb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <prvIdleTask+0x2c>)
 8006bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bd0:	e7f0      	b.n	8006bb4 <prvIdleTask+0x8>
 8006bd2:	bf00      	nop
 8006bd4:	200006ec 	.word	0x200006ec
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be2:	2300      	movs	r3, #0
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	e00c      	b.n	8006c02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4a12      	ldr	r2, [pc, #72]	; (8006c3c <prvInitialiseTaskLists+0x60>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe f944 	bl	8004e84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	607b      	str	r3, [r7, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b37      	cmp	r3, #55	; 0x37
 8006c06:	d9ef      	bls.n	8006be8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c08:	480d      	ldr	r0, [pc, #52]	; (8006c40 <prvInitialiseTaskLists+0x64>)
 8006c0a:	f7fe f93b 	bl	8004e84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c0e:	480d      	ldr	r0, [pc, #52]	; (8006c44 <prvInitialiseTaskLists+0x68>)
 8006c10:	f7fe f938 	bl	8004e84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c14:	480c      	ldr	r0, [pc, #48]	; (8006c48 <prvInitialiseTaskLists+0x6c>)
 8006c16:	f7fe f935 	bl	8004e84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c1a:	480c      	ldr	r0, [pc, #48]	; (8006c4c <prvInitialiseTaskLists+0x70>)
 8006c1c:	f7fe f932 	bl	8004e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c20:	480b      	ldr	r0, [pc, #44]	; (8006c50 <prvInitialiseTaskLists+0x74>)
 8006c22:	f7fe f92f 	bl	8004e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c26:	4b0b      	ldr	r3, [pc, #44]	; (8006c54 <prvInitialiseTaskLists+0x78>)
 8006c28:	4a05      	ldr	r2, [pc, #20]	; (8006c40 <prvInitialiseTaskLists+0x64>)
 8006c2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c2c:	4b0a      	ldr	r3, [pc, #40]	; (8006c58 <prvInitialiseTaskLists+0x7c>)
 8006c2e:	4a05      	ldr	r2, [pc, #20]	; (8006c44 <prvInitialiseTaskLists+0x68>)
 8006c30:	601a      	str	r2, [r3, #0]
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	200006ec 	.word	0x200006ec
 8006c40:	20000b4c 	.word	0x20000b4c
 8006c44:	20000b60 	.word	0x20000b60
 8006c48:	20000b7c 	.word	0x20000b7c
 8006c4c:	20000b90 	.word	0x20000b90
 8006c50:	20000ba8 	.word	0x20000ba8
 8006c54:	20000b74 	.word	0x20000b74
 8006c58:	20000b78 	.word	0x20000b78

08006c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c62:	e019      	b.n	8006c98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c64:	f000 fe98 	bl	8007998 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006c68:	4b0f      	ldr	r3, [pc, #60]	; (8006ca8 <prvCheckTasksWaitingTermination+0x4c>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe f98f 	bl	8004f98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <prvCheckTasksWaitingTermination+0x50>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <prvCheckTasksWaitingTermination+0x50>)
 8006c82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c84:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <prvCheckTasksWaitingTermination+0x54>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <prvCheckTasksWaitingTermination+0x54>)
 8006c8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c8e:	f000 feb5 	bl	80079fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f80e 	bl	8006cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <prvCheckTasksWaitingTermination+0x54>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e1      	bne.n	8006c64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20000b90 	.word	0x20000b90
 8006cac:	20000bbc 	.word	0x20000bbc
 8006cb0:	20000ba4 	.word	0x20000ba4

08006cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d108      	bne.n	8006cd8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f001 f84e 	bl	8007d6c <vPortFree>
				vPortFree( pxTCB );
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f84b 	bl	8007d6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cd6:	e019      	b.n	8006d0c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d103      	bne.n	8006cea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 f842 	bl	8007d6c <vPortFree>
	}
 8006ce8:	e010      	b.n	8006d0c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d00b      	beq.n	8006d0c <prvDeleteTCB+0x58>
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	b672      	cpsid	i
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	b662      	cpsie	i
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e7fe      	b.n	8006d0a <prvDeleteTCB+0x56>
	}
 8006d0c:	bf00      	nop
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <prvResetNextTaskUnblockTime+0x44>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <prvResetNextTaskUnblockTime+0x14>
 8006d24:	2301      	movs	r3, #1
 8006d26:	e000      	b.n	8006d2a <prvResetNextTaskUnblockTime+0x16>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <prvResetNextTaskUnblockTime+0x48>)
 8006d30:	f04f 32ff 	mov.w	r2, #4294967295
 8006d34:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d36:	e008      	b.n	8006d4a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d38:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <prvResetNextTaskUnblockTime+0x44>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4a05      	ldr	r2, [pc, #20]	; (8006d5c <prvResetNextTaskUnblockTime+0x48>)
 8006d48:	6013      	str	r3, [r2, #0]
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000b74 	.word	0x20000b74
 8006d5c:	20000bdc 	.word	0x20000bdc

08006d60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006d66:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <xTaskGetCurrentTaskHandle+0x1c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006d6c:	687b      	ldr	r3, [r7, #4]
	}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	200006e8 	.word	0x200006e8

08006d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <xTaskGetSchedulerState+0x34>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	e008      	b.n	8006da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d94:	4b08      	ldr	r3, [pc, #32]	; (8006db8 <xTaskGetSchedulerState+0x38>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	e001      	b.n	8006da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006da2:	2300      	movs	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006da6:	687b      	ldr	r3, [r7, #4]
	}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	20000bc8 	.word	0x20000bc8
 8006db8:	20000be4 	.word	0x20000be4

08006dbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d056      	beq.n	8006e80 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	4b2d      	ldr	r3, [pc, #180]	; (8006e8c <xTaskPriorityInherit+0xd0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d246      	bcs.n	8006e6e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	db06      	blt.n	8006df6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de8:	4b28      	ldr	r3, [pc, #160]	; (8006e8c <xTaskPriorityInherit+0xd0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6959      	ldr	r1, [r3, #20]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4a22      	ldr	r2, [pc, #136]	; (8006e90 <xTaskPriorityInherit+0xd4>)
 8006e08:	4413      	add	r3, r2
 8006e0a:	4299      	cmp	r1, r3
 8006e0c:	d101      	bne.n	8006e12 <xTaskPriorityInherit+0x56>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <xTaskPriorityInherit+0x58>
 8006e12:	2300      	movs	r3, #0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d022      	beq.n	8006e5e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe f8bb 	bl	8004f98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e22:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <xTaskPriorityInherit+0xd0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <xTaskPriorityInherit+0xd8>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d903      	bls.n	8006e40 <xTaskPriorityInherit+0x84>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <xTaskPriorityInherit+0xd8>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e44:	4613      	mov	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <xTaskPriorityInherit+0xd4>)
 8006e4e:	441a      	add	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	3304      	adds	r3, #4
 8006e54:	4619      	mov	r1, r3
 8006e56:	4610      	mov	r0, r2
 8006e58:	f7fe f841 	bl	8004ede <vListInsertEnd>
 8006e5c:	e004      	b.n	8006e68 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <xTaskPriorityInherit+0xd0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e008      	b.n	8006e80 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e72:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <xTaskPriorityInherit+0xd0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d201      	bcs.n	8006e80 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e80:	68fb      	ldr	r3, [r7, #12]
	}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	200006e8 	.word	0x200006e8
 8006e90:	200006ec 	.word	0x200006ec
 8006e94:	20000bc4 	.word	0x20000bc4

08006e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d058      	beq.n	8006f60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006eae:	4b2f      	ldr	r3, [pc, #188]	; (8006f6c <xTaskPriorityDisinherit+0xd4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d00b      	beq.n	8006ed0 <xTaskPriorityDisinherit+0x38>
 8006eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebc:	b672      	cpsid	i
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	b662      	cpsie	i
 8006ecc:	60fb      	str	r3, [r7, #12]
 8006ece:	e7fe      	b.n	8006ece <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10b      	bne.n	8006ef0 <xTaskPriorityDisinherit+0x58>
 8006ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006edc:	b672      	cpsid	i
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	b662      	cpsie	i
 8006eec:	60bb      	str	r3, [r7, #8]
 8006eee:	e7fe      	b.n	8006eee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ef4:	1e5a      	subs	r2, r3, #1
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d02c      	beq.n	8006f60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d128      	bne.n	8006f60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	3304      	adds	r3, #4
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe f840 	bl	8004f98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <xTaskPriorityDisinherit+0xd8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d903      	bls.n	8006f40 <xTaskPriorityDisinherit+0xa8>
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <xTaskPriorityDisinherit+0xd8>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <xTaskPriorityDisinherit+0xdc>)
 8006f4e:	441a      	add	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fd ffc1 	bl	8004ede <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f60:	697b      	ldr	r3, [r7, #20]
	}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200006e8 	.word	0x200006e8
 8006f70:	20000bc4 	.word	0x20000bc4
 8006f74:	200006ec 	.word	0x200006ec

08006f78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d071      	beq.n	8007074 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8006f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9c:	b672      	cpsid	i
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	b662      	cpsie	i
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	e7fe      	b.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d902      	bls.n	8006fc0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	e002      	b.n	8006fc6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d051      	beq.n	8007074 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d14c      	bne.n	8007074 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fda:	4b28      	ldr	r3, [pc, #160]	; (800707c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d10b      	bne.n	8006ffc <vTaskPriorityDisinheritAfterTimeout+0x84>
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	b672      	cpsid	i
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	b662      	cpsie	i
 8006ff8:	60bb      	str	r3, [r7, #8]
 8006ffa:	e7fe      	b.n	8006ffa <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	2b00      	cmp	r3, #0
 800700e:	db04      	blt.n	800701a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	6959      	ldr	r1, [r3, #20]
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4a15      	ldr	r2, [pc, #84]	; (8007080 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800702a:	4413      	add	r3, r2
 800702c:	4299      	cmp	r1, r3
 800702e:	d101      	bne.n	8007034 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8007034:	2300      	movs	r3, #0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d01c      	beq.n	8007074 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	3304      	adds	r3, #4
 800703e:	4618      	mov	r0, r3
 8007040:	f7fd ffaa 	bl	8004f98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007048:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d903      	bls.n	8007058 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	4a0b      	ldr	r2, [pc, #44]	; (8007084 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4a06      	ldr	r2, [pc, #24]	; (8007080 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007066:	441a      	add	r2, r3
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	3304      	adds	r3, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4610      	mov	r0, r2
 8007070:	f7fd ff35 	bl	8004ede <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007074:	bf00      	nop
 8007076:	3720      	adds	r7, #32
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200006e8 	.word	0x200006e8
 8007080:	200006ec 	.word	0x200006ec
 8007084:	20000bc4 	.word	0x20000bc4

08007088 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <pvTaskIncrementMutexHeldCount+0x24>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <pvTaskIncrementMutexHeldCount+0x24>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800709a:	3201      	adds	r2, #1
 800709c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <pvTaskIncrementMutexHeldCount+0x24>)
 80070a0:	681b      	ldr	r3, [r3, #0]
	}
 80070a2:	4618      	mov	r0, r3
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	200006e8 	.word	0x200006e8

080070b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070ba:	4b21      	ldr	r3, [pc, #132]	; (8007140 <prvAddCurrentTaskToDelayedList+0x90>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c0:	4b20      	ldr	r3, [pc, #128]	; (8007144 <prvAddCurrentTaskToDelayedList+0x94>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	3304      	adds	r3, #4
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fd ff66 	bl	8004f98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d2:	d10a      	bne.n	80070ea <prvAddCurrentTaskToDelayedList+0x3a>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d007      	beq.n	80070ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070da:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <prvAddCurrentTaskToDelayedList+0x94>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4819      	ldr	r0, [pc, #100]	; (8007148 <prvAddCurrentTaskToDelayedList+0x98>)
 80070e4:	f7fd fefb 	bl	8004ede <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070e8:	e026      	b.n	8007138 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4413      	add	r3, r2
 80070f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <prvAddCurrentTaskToDelayedList+0x94>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d209      	bcs.n	8007116 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <prvAddCurrentTaskToDelayedList+0x94>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fd ff09 	bl	8004f26 <vListInsert>
}
 8007114:	e010      	b.n	8007138 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007116:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <prvAddCurrentTaskToDelayedList+0x94>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f7fd feff 	bl	8004f26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007128:	4b0a      	ldr	r3, [pc, #40]	; (8007154 <prvAddCurrentTaskToDelayedList+0xa4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	429a      	cmp	r2, r3
 8007130:	d202      	bcs.n	8007138 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007132:	4a08      	ldr	r2, [pc, #32]	; (8007154 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	6013      	str	r3, [r2, #0]
}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000bc0 	.word	0x20000bc0
 8007144:	200006e8 	.word	0x200006e8
 8007148:	20000ba8 	.word	0x20000ba8
 800714c:	20000b78 	.word	0x20000b78
 8007150:	20000b74 	.word	0x20000b74
 8007154:	20000bdc 	.word	0x20000bdc

08007158 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007162:	f000 fad1 	bl	8007708 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007166:	4b1d      	ldr	r3, [pc, #116]	; (80071dc <xTimerCreateTimerTask+0x84>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d021      	beq.n	80071b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007172:	2300      	movs	r3, #0
 8007174:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007176:	1d3a      	adds	r2, r7, #4
 8007178:	f107 0108 	add.w	r1, r7, #8
 800717c:	f107 030c 	add.w	r3, r7, #12
 8007180:	4618      	mov	r0, r3
 8007182:	f7fd fe65 	bl	8004e50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	9202      	str	r2, [sp, #8]
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	2302      	movs	r3, #2
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	2300      	movs	r3, #0
 8007196:	460a      	mov	r2, r1
 8007198:	4911      	ldr	r1, [pc, #68]	; (80071e0 <xTimerCreateTimerTask+0x88>)
 800719a:	4812      	ldr	r0, [pc, #72]	; (80071e4 <xTimerCreateTimerTask+0x8c>)
 800719c:	f7fe fec0 	bl	8005f20 <xTaskCreateStatic>
 80071a0:	4602      	mov	r2, r0
 80071a2:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <xTimerCreateTimerTask+0x90>)
 80071a4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071a6:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <xTimerCreateTimerTask+0x90>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071ae:	2301      	movs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <xTimerCreateTimerTask+0x78>
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	b672      	cpsid	i
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	b662      	cpsie	i
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	e7fe      	b.n	80071ce <xTimerCreateTimerTask+0x76>
	return xReturn;
 80071d0:	697b      	ldr	r3, [r7, #20]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000c18 	.word	0x20000c18
 80071e0:	08008060 	.word	0x08008060
 80071e4:	0800730d 	.word	0x0800730d
 80071e8:	20000c1c 	.word	0x20000c1c

080071ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10b      	bne.n	800721c <xTimerGenericCommand+0x30>
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	b672      	cpsid	i
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	b662      	cpsie	i
 8007218:	623b      	str	r3, [r7, #32]
 800721a:	e7fe      	b.n	800721a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800721c:	4b19      	ldr	r3, [pc, #100]	; (8007284 <xTimerGenericCommand+0x98>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d02a      	beq.n	800727a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b05      	cmp	r3, #5
 8007234:	dc18      	bgt.n	8007268 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007236:	f7ff fda3 	bl	8006d80 <xTaskGetSchedulerState>
 800723a:	4603      	mov	r3, r0
 800723c:	2b02      	cmp	r3, #2
 800723e:	d109      	bne.n	8007254 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007240:	4b10      	ldr	r3, [pc, #64]	; (8007284 <xTimerGenericCommand+0x98>)
 8007242:	6818      	ldr	r0, [r3, #0]
 8007244:	f107 0110 	add.w	r1, r7, #16
 8007248:	2300      	movs	r3, #0
 800724a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800724c:	f7fe f8d0 	bl	80053f0 <xQueueGenericSend>
 8007250:	6278      	str	r0, [r7, #36]	; 0x24
 8007252:	e012      	b.n	800727a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <xTimerGenericCommand+0x98>)
 8007256:	6818      	ldr	r0, [r3, #0]
 8007258:	f107 0110 	add.w	r1, r7, #16
 800725c:	2300      	movs	r3, #0
 800725e:	2200      	movs	r2, #0
 8007260:	f7fe f8c6 	bl	80053f0 <xQueueGenericSend>
 8007264:	6278      	str	r0, [r7, #36]	; 0x24
 8007266:	e008      	b.n	800727a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007268:	4b06      	ldr	r3, [pc, #24]	; (8007284 <xTimerGenericCommand+0x98>)
 800726a:	6818      	ldr	r0, [r3, #0]
 800726c:	f107 0110 	add.w	r1, r7, #16
 8007270:	2300      	movs	r3, #0
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	f7fe f9be 	bl	80055f4 <xQueueGenericSendFromISR>
 8007278:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800727c:	4618      	mov	r0, r3
 800727e:	3728      	adds	r7, #40	; 0x28
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000c18 	.word	0x20000c18

08007288 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af02      	add	r7, sp, #8
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007292:	4b1d      	ldr	r3, [pc, #116]	; (8007308 <prvProcessExpiredTimer+0x80>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	3304      	adds	r3, #4
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fd fe79 	bl	8004f98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d123      	bne.n	80072f6 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	18d1      	adds	r1, r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	6978      	ldr	r0, [r7, #20]
 80072bc:	f000 f8ca 	bl	8007454 <prvInsertTimerInActiveList>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d017      	beq.n	80072f6 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072c6:	2300      	movs	r3, #0
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2300      	movs	r3, #0
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	2100      	movs	r1, #0
 80072d0:	6978      	ldr	r0, [r7, #20]
 80072d2:	f7ff ff8b 	bl	80071ec <xTimerGenericCommand>
 80072d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10b      	bne.n	80072f6 <prvProcessExpiredTimer+0x6e>
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	b672      	cpsid	i
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	b662      	cpsie	i
 80072f2:	60fb      	str	r3, [r7, #12]
 80072f4:	e7fe      	b.n	80072f4 <prvProcessExpiredTimer+0x6c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	6978      	ldr	r0, [r7, #20]
 80072fc:	4798      	blx	r3
}
 80072fe:	bf00      	nop
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000c10 	.word	0x20000c10

0800730c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007314:	f107 0308 	add.w	r3, r7, #8
 8007318:	4618      	mov	r0, r3
 800731a:	f000 f857 	bl	80073cc <prvGetNextExpireTime>
 800731e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	4619      	mov	r1, r3
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 f803 	bl	8007330 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800732a:	f000 f8d5 	bl	80074d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800732e:	e7f1      	b.n	8007314 <prvTimerTask+0x8>

08007330 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800733a:	f7ff f921 	bl	8006580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800733e:	f107 0308 	add.w	r3, r7, #8
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f866 	bl	8007414 <prvSampleTimeNow>
 8007348:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d130      	bne.n	80073b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d10a      	bne.n	800736c <prvProcessTimerOrBlockTask+0x3c>
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	429a      	cmp	r2, r3
 800735c:	d806      	bhi.n	800736c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800735e:	f7ff f91d 	bl	800659c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007362:	68f9      	ldr	r1, [r7, #12]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff ff8f 	bl	8007288 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800736a:	e024      	b.n	80073b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d008      	beq.n	8007384 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007372:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <prvProcessTimerOrBlockTask+0x90>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	bf0c      	ite	eq
 800737c:	2301      	moveq	r3, #1
 800737e:	2300      	movne	r3, #0
 8007380:	b2db      	uxtb	r3, r3
 8007382:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007384:	4b0f      	ldr	r3, [pc, #60]	; (80073c4 <prvProcessTimerOrBlockTask+0x94>)
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	f7fe fd91 	bl	8005eb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007396:	f7ff f901 	bl	800659c <xTaskResumeAll>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <prvProcessTimerOrBlockTask+0x98>)
 80073a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a6:	601a      	str	r2, [r3, #0]
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	f3bf 8f6f 	isb	sy
}
 80073b0:	e001      	b.n	80073b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073b2:	f7ff f8f3 	bl	800659c <xTaskResumeAll>
}
 80073b6:	bf00      	nop
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	20000c14 	.word	0x20000c14
 80073c4:	20000c18 	.word	0x20000c18
 80073c8:	e000ed04 	.word	0xe000ed04

080073cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073d4:	4b0e      	ldr	r3, [pc, #56]	; (8007410 <prvGetNextExpireTime+0x44>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bf0c      	ite	eq
 80073de:	2301      	moveq	r3, #1
 80073e0:	2300      	movne	r3, #0
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	461a      	mov	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073f2:	4b07      	ldr	r3, [pc, #28]	; (8007410 <prvGetNextExpireTime+0x44>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e001      	b.n	8007402 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007402:	68fb      	ldr	r3, [r7, #12]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	20000c10 	.word	0x20000c10

08007414 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800741c:	f7ff f95c 	bl	80066d8 <xTaskGetTickCount>
 8007420:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007422:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <prvSampleTimeNow+0x3c>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	429a      	cmp	r2, r3
 800742a:	d205      	bcs.n	8007438 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800742c:	f000 f90a 	bl	8007644 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	601a      	str	r2, [r3, #0]
 8007436:	e002      	b.n	800743e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800743e:	4a04      	ldr	r2, [pc, #16]	; (8007450 <prvSampleTimeNow+0x3c>)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007444:	68fb      	ldr	r3, [r7, #12]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000c20 	.word	0x20000c20

08007454 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	429a      	cmp	r2, r3
 8007478:	d812      	bhi.n	80074a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	429a      	cmp	r2, r3
 8007486:	d302      	bcc.n	800748e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007488:	2301      	movs	r3, #1
 800748a:	617b      	str	r3, [r7, #20]
 800748c:	e01b      	b.n	80074c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800748e:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <prvInsertTimerInActiveList+0x7c>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3304      	adds	r3, #4
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f7fd fd44 	bl	8004f26 <vListInsert>
 800749e:	e012      	b.n	80074c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d206      	bcs.n	80074b6 <prvInsertTimerInActiveList+0x62>
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d302      	bcc.n	80074b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
 80074b4:	e007      	b.n	80074c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074b6:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <prvInsertTimerInActiveList+0x80>)
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3304      	adds	r3, #4
 80074be:	4619      	mov	r1, r3
 80074c0:	4610      	mov	r0, r2
 80074c2:	f7fd fd30 	bl	8004f26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074c6:	697b      	ldr	r3, [r7, #20]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3718      	adds	r7, #24
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000c14 	.word	0x20000c14
 80074d4:	20000c10 	.word	0x20000c10

080074d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08e      	sub	sp, #56	; 0x38
 80074dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074de:	e09f      	b.n	8007620 <prvProcessReceivedCommands+0x148>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da19      	bge.n	800751a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074e6:	1d3b      	adds	r3, r7, #4
 80074e8:	3304      	adds	r3, #4
 80074ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10b      	bne.n	800750a <prvProcessReceivedCommands+0x32>
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	b672      	cpsid	i
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	b662      	cpsie	i
 8007506:	61fb      	str	r3, [r7, #28]
 8007508:	e7fe      	b.n	8007508 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007510:	6850      	ldr	r0, [r2, #4]
 8007512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007514:	6892      	ldr	r2, [r2, #8]
 8007516:	4611      	mov	r1, r2
 8007518:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	db7e      	blt.n	800761e <prvProcessReceivedCommands+0x146>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	3304      	adds	r3, #4
 8007530:	4618      	mov	r0, r3
 8007532:	f7fd fd31 	bl	8004f98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007536:	463b      	mov	r3, r7
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff ff6b 	bl	8007414 <prvSampleTimeNow>
 800753e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b09      	cmp	r3, #9
 8007544:	d86c      	bhi.n	8007620 <prvProcessReceivedCommands+0x148>
 8007546:	a201      	add	r2, pc, #4	; (adr r2, 800754c <prvProcessReceivedCommands+0x74>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	08007575 	.word	0x08007575
 8007550:	08007575 	.word	0x08007575
 8007554:	08007575 	.word	0x08007575
 8007558:	08007621 	.word	0x08007621
 800755c:	080075d3 	.word	0x080075d3
 8007560:	0800760d 	.word	0x0800760d
 8007564:	08007575 	.word	0x08007575
 8007568:	08007575 	.word	0x08007575
 800756c:	08007621 	.word	0x08007621
 8007570:	080075d3 	.word	0x080075d3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	18d1      	adds	r1, r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007582:	f7ff ff67 	bl	8007454 <prvInsertTimerInActiveList>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d049      	beq.n	8007620 <prvProcessReceivedCommands+0x148>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007592:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d141      	bne.n	8007620 <prvProcessReceivedCommands+0x148>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	441a      	add	r2, r3
 80075a4:	2300      	movs	r3, #0
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	2300      	movs	r3, #0
 80075aa:	2100      	movs	r1, #0
 80075ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ae:	f7ff fe1d 	bl	80071ec <xTimerGenericCommand>
 80075b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d132      	bne.n	8007620 <prvProcessReceivedCommands+0x148>
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	b672      	cpsid	i
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	b662      	cpsie	i
 80075ce:	61bb      	str	r3, [r7, #24]
 80075d0:	e7fe      	b.n	80075d0 <prvProcessReceivedCommands+0xf8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10b      	bne.n	80075f8 <prvProcessReceivedCommands+0x120>
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	b672      	cpsid	i
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	b662      	cpsie	i
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e7fe      	b.n	80075f6 <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fa:	699a      	ldr	r2, [r3, #24]
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	18d1      	adds	r1, r2, r3
 8007600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007606:	f7ff ff25 	bl	8007454 <prvInsertTimerInActiveList>
					break;
 800760a:	e009      	b.n	8007620 <prvProcessReceivedCommands+0x148>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <prvProcessReceivedCommands+0x148>
						{
							vPortFree( pxTimer );
 8007616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007618:	f000 fba8 	bl	8007d6c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800761c:	e000      	b.n	8007620 <prvProcessReceivedCommands+0x148>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800761e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007620:	4b07      	ldr	r3, [pc, #28]	; (8007640 <prvProcessReceivedCommands+0x168>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	1d39      	adds	r1, r7, #4
 8007626:	2200      	movs	r2, #0
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe f87f 	bl	800572c <xQueueReceive>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	f47f af55 	bne.w	80074e0 <prvProcessReceivedCommands+0x8>
	}
}
 8007636:	bf00      	nop
 8007638:	3730      	adds	r7, #48	; 0x30
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000c18 	.word	0x20000c18

08007644 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b088      	sub	sp, #32
 8007648:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800764a:	e046      	b.n	80076da <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800764c:	4b2c      	ldr	r3, [pc, #176]	; (8007700 <prvSwitchTimerLists+0xbc>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007656:	4b2a      	ldr	r3, [pc, #168]	; (8007700 <prvSwitchTimerLists+0xbc>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	3304      	adds	r3, #4
 8007664:	4618      	mov	r0, r3
 8007666:	f7fd fc97 	bl	8004f98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d12f      	bne.n	80076da <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	4413      	add	r3, r2
 8007682:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	429a      	cmp	r2, r3
 800768a:	d90e      	bls.n	80076aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007698:	4b19      	ldr	r3, [pc, #100]	; (8007700 <prvSwitchTimerLists+0xbc>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3304      	adds	r3, #4
 80076a0:	4619      	mov	r1, r3
 80076a2:	4610      	mov	r0, r2
 80076a4:	f7fd fc3f 	bl	8004f26 <vListInsert>
 80076a8:	e017      	b.n	80076da <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076aa:	2300      	movs	r3, #0
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	2300      	movs	r3, #0
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	2100      	movs	r1, #0
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f7ff fd99 	bl	80071ec <xTimerGenericCommand>
 80076ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <prvSwitchTimerLists+0x96>
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	b672      	cpsid	i
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	b662      	cpsie	i
 80076d6:	603b      	str	r3, [r7, #0]
 80076d8:	e7fe      	b.n	80076d8 <prvSwitchTimerLists+0x94>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <prvSwitchTimerLists+0xbc>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1b3      	bne.n	800764c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076e4:	4b06      	ldr	r3, [pc, #24]	; (8007700 <prvSwitchTimerLists+0xbc>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076ea:	4b06      	ldr	r3, [pc, #24]	; (8007704 <prvSwitchTimerLists+0xc0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a04      	ldr	r2, [pc, #16]	; (8007700 <prvSwitchTimerLists+0xbc>)
 80076f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076f2:	4a04      	ldr	r2, [pc, #16]	; (8007704 <prvSwitchTimerLists+0xc0>)
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	6013      	str	r3, [r2, #0]
}
 80076f8:	bf00      	nop
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	20000c10 	.word	0x20000c10
 8007704:	20000c14 	.word	0x20000c14

08007708 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800770e:	f000 f943 	bl	8007998 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007712:	4b15      	ldr	r3, [pc, #84]	; (8007768 <prvCheckForValidListAndQueue+0x60>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d120      	bne.n	800775c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800771a:	4814      	ldr	r0, [pc, #80]	; (800776c <prvCheckForValidListAndQueue+0x64>)
 800771c:	f7fd fbb2 	bl	8004e84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007720:	4813      	ldr	r0, [pc, #76]	; (8007770 <prvCheckForValidListAndQueue+0x68>)
 8007722:	f7fd fbaf 	bl	8004e84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <prvCheckForValidListAndQueue+0x6c>)
 8007728:	4a10      	ldr	r2, [pc, #64]	; (800776c <prvCheckForValidListAndQueue+0x64>)
 800772a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800772c:	4b12      	ldr	r3, [pc, #72]	; (8007778 <prvCheckForValidListAndQueue+0x70>)
 800772e:	4a10      	ldr	r2, [pc, #64]	; (8007770 <prvCheckForValidListAndQueue+0x68>)
 8007730:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007732:	2300      	movs	r3, #0
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	4b11      	ldr	r3, [pc, #68]	; (800777c <prvCheckForValidListAndQueue+0x74>)
 8007738:	4a11      	ldr	r2, [pc, #68]	; (8007780 <prvCheckForValidListAndQueue+0x78>)
 800773a:	2110      	movs	r1, #16
 800773c:	200a      	movs	r0, #10
 800773e:	f7fd fcbf 	bl	80050c0 <xQueueGenericCreateStatic>
 8007742:	4602      	mov	r2, r0
 8007744:	4b08      	ldr	r3, [pc, #32]	; (8007768 <prvCheckForValidListAndQueue+0x60>)
 8007746:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007748:	4b07      	ldr	r3, [pc, #28]	; (8007768 <prvCheckForValidListAndQueue+0x60>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007750:	4b05      	ldr	r3, [pc, #20]	; (8007768 <prvCheckForValidListAndQueue+0x60>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	490b      	ldr	r1, [pc, #44]	; (8007784 <prvCheckForValidListAndQueue+0x7c>)
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe fb86 	bl	8005e68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800775c:	f000 f94e 	bl	80079fc <vPortExitCritical>
}
 8007760:	bf00      	nop
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000c18 	.word	0x20000c18
 800776c:	20000be8 	.word	0x20000be8
 8007770:	20000bfc 	.word	0x20000bfc
 8007774:	20000c10 	.word	0x20000c10
 8007778:	20000c14 	.word	0x20000c14
 800777c:	20000cc4 	.word	0x20000cc4
 8007780:	20000c24 	.word	0x20000c24
 8007784:	08008068 	.word	0x08008068

08007788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3b04      	subs	r3, #4
 8007798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f023 0201 	bic.w	r2, r3, #1
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077b8:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <pxPortInitialiseStack+0x64>)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3b14      	subs	r3, #20
 80077c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f06f 0202 	mvn.w	r2, #2
 80077d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3b20      	subs	r3, #32
 80077dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077de:	68fb      	ldr	r3, [r7, #12]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	080077f1 	.word	0x080077f1

080077f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077fa:	4b13      	ldr	r3, [pc, #76]	; (8007848 <prvTaskExitError+0x58>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d00b      	beq.n	800781c <prvTaskExitError+0x2c>
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	e7fe      	b.n	800781a <prvTaskExitError+0x2a>
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	b672      	cpsid	i
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	b662      	cpsie	i
 8007830:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007832:	bf00      	nop
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0fc      	beq.n	8007834 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800783a:	bf00      	nop
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	20000008 	.word	0x20000008
 800784c:	00000000 	.word	0x00000000

08007850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <pxCurrentTCBConst2>)
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	6808      	ldr	r0, [r1, #0]
 8007856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	f380 8809 	msr	PSP, r0
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8811 	msr	BASEPRI, r0
 800786a:	4770      	bx	lr
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst2>:
 8007870:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007878:	4808      	ldr	r0, [pc, #32]	; (800789c <prvPortStartFirstTask+0x24>)
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f380 8808 	msr	MSP, r0
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8814 	msr	CONTROL, r0
 800788a:	b662      	cpsie	i
 800788c:	b661      	cpsie	f
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	df00      	svc	0
 8007898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800789a:	bf00      	nop
 800789c:	e000ed08 	.word	0xe000ed08

080078a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078a6:	4b36      	ldr	r3, [pc, #216]	; (8007980 <xPortStartScheduler+0xe0>)
 80078a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	4b2e      	ldr	r3, [pc, #184]	; (8007984 <xPortStartScheduler+0xe4>)
 80078cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078ce:	4b2e      	ldr	r3, [pc, #184]	; (8007988 <xPortStartScheduler+0xe8>)
 80078d0:	2207      	movs	r2, #7
 80078d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078d4:	e009      	b.n	80078ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80078d6:	4b2c      	ldr	r3, [pc, #176]	; (8007988 <xPortStartScheduler+0xe8>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3b01      	subs	r3, #1
 80078dc:	4a2a      	ldr	r2, [pc, #168]	; (8007988 <xPortStartScheduler+0xe8>)
 80078de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ea:	78fb      	ldrb	r3, [r7, #3]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f2:	2b80      	cmp	r3, #128	; 0x80
 80078f4:	d0ef      	beq.n	80078d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <xPortStartScheduler+0xe8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1c3 0307 	rsb	r3, r3, #7
 80078fe:	2b04      	cmp	r3, #4
 8007900:	d00b      	beq.n	800791a <xPortStartScheduler+0x7a>
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	b672      	cpsid	i
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	b662      	cpsie	i
 8007916:	60bb      	str	r3, [r7, #8]
 8007918:	e7fe      	b.n	8007918 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800791a:	4b1b      	ldr	r3, [pc, #108]	; (8007988 <xPortStartScheduler+0xe8>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	4a19      	ldr	r2, [pc, #100]	; (8007988 <xPortStartScheduler+0xe8>)
 8007922:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007924:	4b18      	ldr	r3, [pc, #96]	; (8007988 <xPortStartScheduler+0xe8>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800792c:	4a16      	ldr	r2, [pc, #88]	; (8007988 <xPortStartScheduler+0xe8>)
 800792e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007938:	4b14      	ldr	r3, [pc, #80]	; (800798c <xPortStartScheduler+0xec>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a13      	ldr	r2, [pc, #76]	; (800798c <xPortStartScheduler+0xec>)
 800793e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007942:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007944:	4b11      	ldr	r3, [pc, #68]	; (800798c <xPortStartScheduler+0xec>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a10      	ldr	r2, [pc, #64]	; (800798c <xPortStartScheduler+0xec>)
 800794a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800794e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007950:	f000 f8d4 	bl	8007afc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <xPortStartScheduler+0xf0>)
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800795a:	f000 f8f3 	bl	8007b44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <xPortStartScheduler+0xf4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a0c      	ldr	r2, [pc, #48]	; (8007994 <xPortStartScheduler+0xf4>)
 8007964:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007968:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800796a:	f7ff ff85 	bl	8007878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800796e:	f7fe ff83 	bl	8006878 <vTaskSwitchContext>
	prvTaskExitError();
 8007972:	f7ff ff3d 	bl	80077f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	e000e400 	.word	0xe000e400
 8007984:	20000d14 	.word	0x20000d14
 8007988:	20000d18 	.word	0x20000d18
 800798c:	e000ed20 	.word	0xe000ed20
 8007990:	20000008 	.word	0x20000008
 8007994:	e000ef34 	.word	0xe000ef34

08007998 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	b672      	cpsid	i
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	b662      	cpsie	i
 80079b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079b4:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <vPortEnterCritical+0x5c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3301      	adds	r3, #1
 80079ba:	4a0e      	ldr	r2, [pc, #56]	; (80079f4 <vPortEnterCritical+0x5c>)
 80079bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80079be:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <vPortEnterCritical+0x5c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d110      	bne.n	80079e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80079c6:	4b0c      	ldr	r3, [pc, #48]	; (80079f8 <vPortEnterCritical+0x60>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00b      	beq.n	80079e8 <vPortEnterCritical+0x50>
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	b672      	cpsid	i
 80079d6:	f383 8811 	msr	BASEPRI, r3
 80079da:	f3bf 8f6f 	isb	sy
 80079de:	f3bf 8f4f 	dsb	sy
 80079e2:	b662      	cpsie	i
 80079e4:	603b      	str	r3, [r7, #0]
 80079e6:	e7fe      	b.n	80079e6 <vPortEnterCritical+0x4e>
	}
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr
 80079f4:	20000008 	.word	0x20000008
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a02:	4b12      	ldr	r3, [pc, #72]	; (8007a4c <vPortExitCritical+0x50>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10b      	bne.n	8007a22 <vPortExitCritical+0x26>
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	b672      	cpsid	i
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	b662      	cpsie	i
 8007a1e:	607b      	str	r3, [r7, #4]
 8007a20:	e7fe      	b.n	8007a20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007a22:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <vPortExitCritical+0x50>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	4a08      	ldr	r2, [pc, #32]	; (8007a4c <vPortExitCritical+0x50>)
 8007a2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a2c:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <vPortExitCritical+0x50>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d104      	bne.n	8007a3e <vPortExitCritical+0x42>
 8007a34:	2300      	movs	r3, #0
 8007a36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a3e:	bf00      	nop
 8007a40:	370c      	adds	r7, #12
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	20000008 	.word	0x20000008

08007a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a50:	f3ef 8009 	mrs	r0, PSP
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	4b15      	ldr	r3, [pc, #84]	; (8007ab0 <pxCurrentTCBConst>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	f01e 0f10 	tst.w	lr, #16
 8007a60:	bf08      	it	eq
 8007a62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007a66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	6010      	str	r0, [r2, #0]
 8007a6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a74:	b672      	cpsid	i
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	b662      	cpsie	i
 8007a84:	f7fe fef8 	bl	8006878 <vTaskSwitchContext>
 8007a88:	f04f 0000 	mov.w	r0, #0
 8007a8c:	f380 8811 	msr	BASEPRI, r0
 8007a90:	bc09      	pop	{r0, r3}
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	6808      	ldr	r0, [r1, #0]
 8007a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9a:	f01e 0f10 	tst.w	lr, #16
 8007a9e:	bf08      	it	eq
 8007aa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007aa4:	f380 8809 	msr	PSP, r0
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop

08007ab0 <pxCurrentTCBConst>:
 8007ab0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop

08007ab8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	b672      	cpsid	i
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	b662      	cpsie	i
 8007ad2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ad4:	f7fe fe10 	bl	80066f8 <xTaskIncrementTick>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007ade:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <SysTick_Handler+0x40>)
 8007ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <vPortSetupTimerInterrupt+0x34>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b06:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <vPortSetupTimerInterrupt+0x38>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <vPortSetupTimerInterrupt+0x3c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a0a      	ldr	r2, [pc, #40]	; (8007b3c <vPortSetupTimerInterrupt+0x40>)
 8007b12:	fba2 2303 	umull	r2, r3, r2, r3
 8007b16:	099b      	lsrs	r3, r3, #6
 8007b18:	4a09      	ldr	r2, [pc, #36]	; (8007b40 <vPortSetupTimerInterrupt+0x44>)
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b1e:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <vPortSetupTimerInterrupt+0x34>)
 8007b20:	2207      	movs	r2, #7
 8007b22:	601a      	str	r2, [r3, #0]
}
 8007b24:	bf00      	nop
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	e000e010 	.word	0xe000e010
 8007b34:	e000e018 	.word	0xe000e018
 8007b38:	20000000 	.word	0x20000000
 8007b3c:	10624dd3 	.word	0x10624dd3
 8007b40:	e000e014 	.word	0xe000e014

08007b44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007b54 <vPortEnableVFP+0x10>
 8007b48:	6801      	ldr	r1, [r0, #0]
 8007b4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b4e:	6001      	str	r1, [r0, #0]
 8007b50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b52:	bf00      	nop
 8007b54:	e000ed88 	.word	0xe000ed88

08007b58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007b5e:	f3ef 8305 	mrs	r3, IPSR
 8007b62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2b0f      	cmp	r3, #15
 8007b68:	d915      	bls.n	8007b96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007b6a:	4a18      	ldr	r2, [pc, #96]	; (8007bcc <vPortValidateInterruptPriority+0x74>)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b74:	4b16      	ldr	r3, [pc, #88]	; (8007bd0 <vPortValidateInterruptPriority+0x78>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	7afa      	ldrb	r2, [r7, #11]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d20b      	bcs.n	8007b96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	b672      	cpsid	i
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	b662      	cpsie	i
 8007b92:	607b      	str	r3, [r7, #4]
 8007b94:	e7fe      	b.n	8007b94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b96:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <vPortValidateInterruptPriority+0x7c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b9e:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <vPortValidateInterruptPriority+0x80>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d90b      	bls.n	8007bbe <vPortValidateInterruptPriority+0x66>
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	b672      	cpsid	i
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	b662      	cpsie	i
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	e7fe      	b.n	8007bbc <vPortValidateInterruptPriority+0x64>
	}
 8007bbe:	bf00      	nop
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	e000e3f0 	.word	0xe000e3f0
 8007bd0:	20000d14 	.word	0x20000d14
 8007bd4:	e000ed0c 	.word	0xe000ed0c
 8007bd8:	20000d18 	.word	0x20000d18

08007bdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b08a      	sub	sp, #40	; 0x28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007be8:	f7fe fcca 	bl	8006580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007bec:	4b5a      	ldr	r3, [pc, #360]	; (8007d58 <pvPortMalloc+0x17c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007bf4:	f000 f916 	bl	8007e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007bf8:	4b58      	ldr	r3, [pc, #352]	; (8007d5c <pvPortMalloc+0x180>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 8090 	bne.w	8007d26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01e      	beq.n	8007c4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c0c:	2208      	movs	r2, #8
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4413      	add	r3, r2
 8007c12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d015      	beq.n	8007c4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f023 0307 	bic.w	r3, r3, #7
 8007c24:	3308      	adds	r3, #8
 8007c26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00b      	beq.n	8007c4a <pvPortMalloc+0x6e>
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	b672      	cpsid	i
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	b662      	cpsie	i
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	e7fe      	b.n	8007c48 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d06a      	beq.n	8007d26 <pvPortMalloc+0x14a>
 8007c50:	4b43      	ldr	r3, [pc, #268]	; (8007d60 <pvPortMalloc+0x184>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d865      	bhi.n	8007d26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007c5a:	4b42      	ldr	r3, [pc, #264]	; (8007d64 <pvPortMalloc+0x188>)
 8007c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007c5e:	4b41      	ldr	r3, [pc, #260]	; (8007d64 <pvPortMalloc+0x188>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c64:	e004      	b.n	8007c70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d903      	bls.n	8007c82 <pvPortMalloc+0xa6>
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1f1      	bne.n	8007c66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c82:	4b35      	ldr	r3, [pc, #212]	; (8007d58 <pvPortMalloc+0x17c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d04c      	beq.n	8007d26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2208      	movs	r2, #8
 8007c92:	4413      	add	r3, r2
 8007c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	1ad2      	subs	r2, r2, r3
 8007ca6:	2308      	movs	r3, #8
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d920      	bls.n	8007cf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f003 0307 	and.w	r3, r3, #7
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <pvPortMalloc+0xfc>
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	b672      	cpsid	i
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	b662      	cpsie	i
 8007cd4:	613b      	str	r3, [r7, #16]
 8007cd6:	e7fe      	b.n	8007cd6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007cea:	69b8      	ldr	r0, [r7, #24]
 8007cec:	f000 f8fc 	bl	8007ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007cf0:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <pvPortMalloc+0x184>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	4a19      	ldr	r2, [pc, #100]	; (8007d60 <pvPortMalloc+0x184>)
 8007cfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007cfe:	4b18      	ldr	r3, [pc, #96]	; (8007d60 <pvPortMalloc+0x184>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <pvPortMalloc+0x18c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d203      	bcs.n	8007d12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d0a:	4b15      	ldr	r3, [pc, #84]	; (8007d60 <pvPortMalloc+0x184>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a16      	ldr	r2, [pc, #88]	; (8007d68 <pvPortMalloc+0x18c>)
 8007d10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4b11      	ldr	r3, [pc, #68]	; (8007d5c <pvPortMalloc+0x180>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d26:	f7fe fc39 	bl	800659c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <pvPortMalloc+0x170>
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	b672      	cpsid	i
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	b662      	cpsie	i
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	e7fe      	b.n	8007d4a <pvPortMalloc+0x16e>
	return pvReturn;
 8007d4c:	69fb      	ldr	r3, [r7, #28]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3728      	adds	r7, #40	; 0x28
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20004924 	.word	0x20004924
 8007d5c:	20004930 	.word	0x20004930
 8007d60:	20004928 	.word	0x20004928
 8007d64:	2000491c 	.word	0x2000491c
 8007d68:	2000492c 	.word	0x2000492c

08007d6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d04a      	beq.n	8007e14 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d7e:	2308      	movs	r3, #8
 8007d80:	425b      	negs	r3, r3
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4413      	add	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	4b22      	ldr	r3, [pc, #136]	; (8007e1c <vPortFree+0xb0>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4013      	ands	r3, r2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10b      	bne.n	8007db2 <vPortFree+0x46>
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	b672      	cpsid	i
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	b662      	cpsie	i
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	e7fe      	b.n	8007db0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00b      	beq.n	8007dd2 <vPortFree+0x66>
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	b672      	cpsid	i
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	b662      	cpsie	i
 8007dce:	60bb      	str	r3, [r7, #8]
 8007dd0:	e7fe      	b.n	8007dd0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	4b11      	ldr	r3, [pc, #68]	; (8007e1c <vPortFree+0xb0>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d019      	beq.n	8007e14 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d115      	bne.n	8007e14 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <vPortFree+0xb0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	43db      	mvns	r3, r3
 8007df2:	401a      	ands	r2, r3
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007df8:	f7fe fbc2 	bl	8006580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <vPortFree+0xb4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4413      	add	r3, r2
 8007e06:	4a06      	ldr	r2, [pc, #24]	; (8007e20 <vPortFree+0xb4>)
 8007e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e0a:	6938      	ldr	r0, [r7, #16]
 8007e0c:	f000 f86c 	bl	8007ee8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007e10:	f7fe fbc4 	bl	800659c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e14:	bf00      	nop
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	20004930 	.word	0x20004930
 8007e20:	20004928 	.word	0x20004928

08007e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e30:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <prvHeapInit+0xac>)
 8007e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00c      	beq.n	8007e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3307      	adds	r3, #7
 8007e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	4a1f      	ldr	r2, [pc, #124]	; (8007ed0 <prvHeapInit+0xac>)
 8007e54:	4413      	add	r3, r2
 8007e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ed4 <prvHeapInit+0xb0>)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e62:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <prvHeapInit+0xb0>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e70:	2208      	movs	r2, #8
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	1a9b      	subs	r3, r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0307 	bic.w	r3, r3, #7
 8007e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a15      	ldr	r2, [pc, #84]	; (8007ed8 <prvHeapInit+0xb4>)
 8007e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e86:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <prvHeapInit+0xb4>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e8e:	4b12      	ldr	r3, [pc, #72]	; (8007ed8 <prvHeapInit+0xb4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ea4:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <prvHeapInit+0xb4>)
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <prvHeapInit+0xb8>)
 8007eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <prvHeapInit+0xbc>)
 8007eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <prvHeapInit+0xc0>)
 8007ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	20000d1c 	.word	0x20000d1c
 8007ed4:	2000491c 	.word	0x2000491c
 8007ed8:	20004924 	.word	0x20004924
 8007edc:	2000492c 	.word	0x2000492c
 8007ee0:	20004928 	.word	0x20004928
 8007ee4:	20004930 	.word	0x20004930

08007ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ef0:	4b28      	ldr	r3, [pc, #160]	; (8007f94 <prvInsertBlockIntoFreeList+0xac>)
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e002      	b.n	8007efc <prvInsertBlockIntoFreeList+0x14>
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d8f7      	bhi.n	8007ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	4413      	add	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d108      	bne.n	8007f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	441a      	add	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	441a      	add	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d118      	bne.n	8007f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <prvInsertBlockIntoFreeList+0xb0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d00d      	beq.n	8007f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685a      	ldr	r2, [r3, #4]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	441a      	add	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	601a      	str	r2, [r3, #0]
 8007f64:	e008      	b.n	8007f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f66:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <prvInsertBlockIntoFreeList+0xb0>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	e003      	b.n	8007f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d002      	beq.n	8007f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f86:	bf00      	nop
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	2000491c 	.word	0x2000491c
 8007f98:	20004924 	.word	0x20004924

08007f9c <__libc_init_array>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	4e0d      	ldr	r6, [pc, #52]	; (8007fd4 <__libc_init_array+0x38>)
 8007fa0:	4c0d      	ldr	r4, [pc, #52]	; (8007fd8 <__libc_init_array+0x3c>)
 8007fa2:	1ba4      	subs	r4, r4, r6
 8007fa4:	10a4      	asrs	r4, r4, #2
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	42a5      	cmp	r5, r4
 8007faa:	d109      	bne.n	8007fc0 <__libc_init_array+0x24>
 8007fac:	4e0b      	ldr	r6, [pc, #44]	; (8007fdc <__libc_init_array+0x40>)
 8007fae:	4c0c      	ldr	r4, [pc, #48]	; (8007fe0 <__libc_init_array+0x44>)
 8007fb0:	f000 f82c 	bl	800800c <_init>
 8007fb4:	1ba4      	subs	r4, r4, r6
 8007fb6:	10a4      	asrs	r4, r4, #2
 8007fb8:	2500      	movs	r5, #0
 8007fba:	42a5      	cmp	r5, r4
 8007fbc:	d105      	bne.n	8007fca <__libc_init_array+0x2e>
 8007fbe:	bd70      	pop	{r4, r5, r6, pc}
 8007fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fc4:	4798      	blx	r3
 8007fc6:	3501      	adds	r5, #1
 8007fc8:	e7ee      	b.n	8007fa8 <__libc_init_array+0xc>
 8007fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007fce:	4798      	blx	r3
 8007fd0:	3501      	adds	r5, #1
 8007fd2:	e7f2      	b.n	8007fba <__libc_init_array+0x1e>
 8007fd4:	08008090 	.word	0x08008090
 8007fd8:	08008090 	.word	0x08008090
 8007fdc:	08008090 	.word	0x08008090
 8007fe0:	08008094 	.word	0x08008094

08007fe4 <memcpy>:
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	1e43      	subs	r3, r0, #1
 8007fe8:	440a      	add	r2, r1
 8007fea:	4291      	cmp	r1, r2
 8007fec:	d100      	bne.n	8007ff0 <memcpy+0xc>
 8007fee:	bd10      	pop	{r4, pc}
 8007ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ff8:	e7f7      	b.n	8007fea <memcpy+0x6>

08007ffa <memset>:
 8007ffa:	4402      	add	r2, r0
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d100      	bne.n	8008004 <memset+0xa>
 8008002:	4770      	bx	lr
 8008004:	f803 1b01 	strb.w	r1, [r3], #1
 8008008:	e7f9      	b.n	8007ffe <memset+0x4>
	...

0800800c <_init>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr

08008018 <_fini>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr
